using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace PublisherData.Migrations
{
    public partial class SeedAll : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Artists",
                columns: table => new
                {
                    ArtistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Artists", x => x.ArtistId);
                });

            migrationBuilder.CreateTable(
                name: "Authors",
                columns: table => new
                {
                    AuthorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Authors", x => x.AuthorId);
                });

            migrationBuilder.CreateTable(
                name: "Books",
                columns: table => new
                {
                    BookId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PublishDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    BasePrice = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    AuthorId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Books", x => x.BookId);
                    table.ForeignKey(
                        name: "FK_Books_Authors_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Authors",
                        principalColumn: "AuthorId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Covers",
                columns: table => new
                {
                    CoverId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DesignIdeas = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DigitalOnly = table.Column<bool>(type: "bit", nullable: false),
                    BookId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Covers", x => x.CoverId);
                    table.ForeignKey(
                        name: "FK_Covers_Books_BookId",
                        column: x => x.BookId,
                        principalTable: "Books",
                        principalColumn: "BookId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ArtistCover",
                columns: table => new
                {
                    ArtistsArtistId = table.Column<int>(type: "int", nullable: false),
                    CoversCoverId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ArtistCover", x => new { x.ArtistsArtistId, x.CoversCoverId });
                    table.ForeignKey(
                        name: "FK_ArtistCover_Artists_ArtistsArtistId",
                        column: x => x.ArtistsArtistId,
                        principalTable: "Artists",
                        principalColumn: "ArtistId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ArtistCover_Covers_CoversCoverId",
                        column: x => x.CoversCoverId,
                        principalTable: "Covers",
                        principalColumn: "CoverId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 1, "Federico", "Thompson" },
                    { 2, "Meghan", "Beier" },
                    { 3, "Ally", "Wisoky" },
                    { 4, "Santiago", "Orn" },
                    { 5, "Kristofer", "Boehm" },
                    { 6, "Emie", "Romaguera" },
                    { 7, "Sarah", "Cole" },
                    { 8, "Buster", "Walker" },
                    { 9, "Isaac", "Torp" },
                    { 10, "Myra", "Schimmel" },
                    { 11, "Giovanna", "Wiza" },
                    { 12, "Boyd", "Nikolaus" },
                    { 13, "Coy", "Heaney" },
                    { 14, "Maverick", "Leffler" },
                    { 15, "Bria", "Sauer" },
                    { 16, "Letitia", "Emmerich" },
                    { 17, "Catalina", "Rowe" },
                    { 18, "Eli", "O'Hara" },
                    { 19, "Elwyn", "Rowe" },
                    { 20, "Janie", "Larkin" },
                    { 21, "Randall", "Gorczany" },
                    { 22, "Christina", "Conroy" },
                    { 23, "Delfina", "Rutherford" },
                    { 24, "Max", "Bins" },
                    { 25, "Buck", "Okuneva" },
                    { 26, "Shaylee", "Witting" },
                    { 27, "Christ", "Heathcote" },
                    { 28, "Sven", "Jerde" },
                    { 29, "Eric", "Jacobson" },
                    { 30, "Laron", "Luettgen" },
                    { 31, "Helen", "Vandervort" },
                    { 32, "Gerda", "Haag" },
                    { 33, "Krista", "Metz" },
                    { 34, "Stephania", "Gibson" },
                    { 35, "Arvilla", "Krajcik" },
                    { 36, "Madisen", "Abbott" },
                    { 37, "Anabelle", "Leannon" },
                    { 38, "Candelario", "Collier" },
                    { 39, "Alvah", "Kihn" },
                    { 40, "Lon", "Friesen" },
                    { 41, "Jamie", "Halvorson" },
                    { 42, "Westley", "Glover" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 43, "Rafaela", "Padberg" },
                    { 44, "Kali", "Mann" },
                    { 45, "Nova", "Ondricka" },
                    { 46, "Thomas", "Denesik" },
                    { 47, "Aron", "Grant" },
                    { 48, "Raphaelle", "Moore" },
                    { 49, "Carmella", "Gottlieb" },
                    { 50, "Kendrick", "Cruickshank" },
                    { 51, "Manuel", "Hansen" },
                    { 52, "Jacinthe", "Rogahn" },
                    { 53, "Kayden", "Emmerich" },
                    { 54, "Glenna", "White" },
                    { 55, "Heather", "Koch" },
                    { 56, "Thea", "Kozey" },
                    { 57, "Lori", "McKenzie" },
                    { 58, "Walton", "Bashirian" },
                    { 59, "Sheridan", "Hartmann" },
                    { 60, "Jakayla", "McDermott" },
                    { 61, "Maegan", "Bauch" },
                    { 62, "Savannah", "Hettinger" },
                    { 63, "Sheila", "Frami" },
                    { 64, "Frederic", "Abbott" },
                    { 65, "Jedediah", "Boehm" },
                    { 66, "Zita", "Jast" },
                    { 67, "Keegan", "Tromp" },
                    { 68, "Jocelyn", "Friesen" },
                    { 69, "Letitia", "Aufderhar" },
                    { 70, "Freeda", "Hegmann" },
                    { 71, "Gina", "Swaniawski" },
                    { 72, "Jeremie", "Emmerich" },
                    { 73, "Cruz", "McDermott" },
                    { 74, "George", "O'Reilly" },
                    { 75, "Hester", "Wolf" },
                    { 76, "Josianne", "Yundt" },
                    { 77, "Jamey", "Schulist" },
                    { 78, "Gregoria", "Legros" },
                    { 79, "Jackeline", "Boyer" },
                    { 80, "Donnell", "Abbott" },
                    { 81, "Dortha", "Nitzsche" },
                    { 82, "Oceane", "Jacobson" },
                    { 83, "Elyse", "Rogahn" },
                    { 84, "Gavin", "Stehr" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 85, "Lorenzo", "Wiegand" },
                    { 86, "Lawson", "Kiehn" },
                    { 87, "Arjun", "Walter" },
                    { 88, "Bethany", "Yost" },
                    { 89, "Sonia", "Schmitt" },
                    { 90, "Karli", "White" },
                    { 91, "Randy", "Fahey" },
                    { 92, "Manley", "Corwin" },
                    { 93, "Beth", "Parker" },
                    { 94, "Aiden", "Pouros" },
                    { 95, "Vance", "Little" },
                    { 96, "Issac", "Miller" },
                    { 97, "Trudie", "Hammes" },
                    { 98, "Vernice", "Tillman" },
                    { 99, "Krista", "Hermann" },
                    { 100, "Lenna", "Moen" },
                    { 101, "Leland", "Reinger" },
                    { 102, "Jovan", "Quigley" },
                    { 103, "Burdette", "Schumm" },
                    { 104, "Bulah", "Murazik" },
                    { 105, "Ida", "Schaefer" },
                    { 106, "Noelia", "Cormier" },
                    { 107, "Gardner", "Pfannerstill" },
                    { 108, "Brielle", "Lakin" },
                    { 109, "Gregorio", "Goodwin" },
                    { 110, "Jade", "Yost" },
                    { 111, "Jerome", "Gerlach" },
                    { 112, "Llewellyn", "Koepp" },
                    { 113, "Rod", "Haag" },
                    { 114, "Grover", "Dooley" },
                    { 115, "Janie", "Wisozk" },
                    { 116, "Rashawn", "White" },
                    { 117, "Josefina", "Haag" },
                    { 118, "Katelyn", "Feest" },
                    { 119, "Herta", "Connelly" },
                    { 120, "Gia", "Strosin" },
                    { 121, "Salma", "Schulist" },
                    { 122, "Terrill", "Barton" },
                    { 123, "Laury", "Welch" },
                    { 124, "Kenton", "Bergstrom" },
                    { 125, "Katelyn", "Reynolds" },
                    { 126, "Tavares", "Dach" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 127, "Alphonso", "Beatty" },
                    { 128, "Emmett", "Schamberger" },
                    { 129, "Melody", "Terry" },
                    { 130, "Andre", "Jaskolski" },
                    { 131, "Jakob", "Haag" },
                    { 132, "Terrance", "Schinner" },
                    { 133, "Rudy", "Stracke" },
                    { 134, "Garland", "Herzog" },
                    { 135, "Jarod", "Balistreri" },
                    { 136, "Itzel", "Nitzsche" },
                    { 137, "Webster", "Schaden" },
                    { 138, "Rodrick", "Jerde" },
                    { 139, "Otis", "Feeney" },
                    { 140, "Verda", "MacGyver" },
                    { 141, "Salvatore", "Kovacek" },
                    { 142, "Christina", "Goldner" },
                    { 143, "Javonte", "Bashirian" },
                    { 144, "Milan", "Stark" },
                    { 145, "Davin", "Keebler" },
                    { 146, "Keyshawn", "Herzog" },
                    { 147, "Maryjane", "Hauck" },
                    { 148, "Spencer", "Ward" },
                    { 149, "Antonio", "Rowe" },
                    { 150, "Linda", "Abernathy" },
                    { 151, "Beth", "Mitchell" },
                    { 152, "Armani", "Lubowitz" },
                    { 153, "Nash", "Hettinger" },
                    { 154, "Olga", "Rice" },
                    { 155, "Lilyan", "Buckridge" },
                    { 156, "Nicklaus", "Hamill" },
                    { 157, "Abbey", "Cassin" },
                    { 158, "Edward", "Barrows" },
                    { 159, "Chris", "Bauch" },
                    { 160, "Jamie", "Lind" },
                    { 161, "Taryn", "Rempel" },
                    { 162, "Meda", "Schimmel" },
                    { 163, "Dennis", "Kertzmann" },
                    { 164, "Destini", "Weissnat" },
                    { 165, "Johnpaul", "Swaniawski" },
                    { 166, "Hermina", "Mann" },
                    { 167, "Jared", "Huels" },
                    { 168, "Antonia", "Corkery" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 169, "Candice", "Lakin" },
                    { 170, "Shannon", "Wyman" },
                    { 171, "Jerrold", "DuBuque" },
                    { 172, "Jaylan", "Batz" },
                    { 173, "Dayana", "Kub" },
                    { 174, "Skye", "Schumm" },
                    { 175, "Reinhold", "Ratke" },
                    { 176, "Gilda", "Skiles" },
                    { 177, "Felix", "Gleason" },
                    { 178, "Bertram", "Zemlak" },
                    { 179, "Darion", "Kohler" },
                    { 180, "Avis", "Doyle" },
                    { 181, "Patsy", "West" },
                    { 182, "Nannie", "Moen" },
                    { 183, "Karine", "Kiehn" },
                    { 184, "Renee", "Dickens" },
                    { 185, "Bertha", "Nicolas" },
                    { 186, "Shad", "Rogahn" },
                    { 187, "Nayeli", "Hegmann" },
                    { 188, "Tyrell", "Baumbach" },
                    { 189, "Ludwig", "Gaylord" },
                    { 190, "Zachary", "Willms" },
                    { 191, "Annetta", "Wintheiser" },
                    { 192, "Salvador", "Nikolaus" },
                    { 193, "Adelbert", "Okuneva" },
                    { 194, "Jeremy", "Lockman" },
                    { 195, "Alda", "Farrell" },
                    { 196, "Hassan", "Nitzsche" },
                    { 197, "Karl", "Reichel" },
                    { 198, "Elisa", "Herman" },
                    { 199, "Berta", "Adams" },
                    { 200, "Candace", "Kiehn" },
                    { 201, "Ruthe", "Beier" },
                    { 202, "Agnes", "Zieme" },
                    { 203, "Mary", "Cormier" },
                    { 204, "Eusebio", "Lindgren" },
                    { 205, "Hanna", "Bergstrom" },
                    { 206, "Mylene", "Lind" },
                    { 207, "Nicole", "Haag" },
                    { 208, "Weldon", "Gutkowski" },
                    { 209, "Katelyn", "Ledner" },
                    { 210, "Ida", "Herman" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 211, "Giovanny", "Swift" },
                    { 212, "Declan", "Luettgen" },
                    { 213, "Mina", "Emmerich" },
                    { 214, "Katelin", "Moore" },
                    { 215, "Stuart", "Blanda" },
                    { 216, "Ed", "Rohan" },
                    { 217, "Cleveland", "Jacobs" },
                    { 218, "Dena", "Windler" },
                    { 219, "Bridgette", "Nader" },
                    { 220, "Chaya", "Mitchell" },
                    { 221, "Santiago", "Daugherty" },
                    { 222, "Ruben", "Schroeder" },
                    { 223, "Amos", "Williamson" },
                    { 224, "Haleigh", "Moore" },
                    { 225, "Saige", "Pagac" },
                    { 226, "Cade", "Ritchie" },
                    { 227, "Jamil", "Bahringer" },
                    { 228, "Mathias", "Bartoletti" },
                    { 229, "Bianka", "Braun" },
                    { 230, "Thurman", "Terry" },
                    { 231, "Taya", "Hayes" },
                    { 232, "Kamille", "Skiles" },
                    { 233, "Darrell", "Kunze" },
                    { 234, "Michelle", "Doyle" },
                    { 235, "Velma", "Davis" },
                    { 236, "Sigurd", "Swaniawski" },
                    { 237, "Coy", "Christiansen" },
                    { 238, "Kory", "Sporer" },
                    { 239, "Makenna", "Zieme" },
                    { 240, "Vergie", "Sipes" },
                    { 241, "Ulices", "Leffler" },
                    { 242, "Rachel", "Krajcik" },
                    { 243, "Jalyn", "Ondricka" },
                    { 244, "Mallory", "Grady" },
                    { 245, "Maritza", "Langosh" },
                    { 246, "Israel", "Goldner" },
                    { 247, "Lois", "Carroll" },
                    { 248, "Demond", "Vandervort" },
                    { 249, "Carrie", "Marvin" },
                    { 250, "Dimitri", "Bartoletti" },
                    { 251, "Nikolas", "Pagac" },
                    { 252, "Zander", "Crooks" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 253, "Ross", "Ankunding" },
                    { 254, "Christopher", "Schulist" },
                    { 255, "Addie", "Runolfsson" },
                    { 256, "Gilda", "Lakin" },
                    { 257, "Sheila", "Hirthe" },
                    { 258, "Rossie", "Upton" },
                    { 259, "Elmo", "O'Conner" },
                    { 260, "Solon", "Predovic" },
                    { 261, "Kieran", "McCullough" },
                    { 262, "Desmond", "Wolff" },
                    { 263, "Donavon", "Goldner" },
                    { 264, "Sabina", "Gleason" },
                    { 265, "Evelyn", "Kshlerin" },
                    { 266, "Giovanni", "Gerlach" },
                    { 267, "Hoyt", "Mante" },
                    { 268, "Fermin", "Schaden" },
                    { 269, "Nicklaus", "Lind" },
                    { 270, "Viola", "Spinka" },
                    { 271, "Luther", "Dibbert" },
                    { 272, "Jack", "Farrell" },
                    { 273, "Antonio", "Brekke" },
                    { 274, "Roma", "Dickens" },
                    { 275, "Jalon", "Kunze" },
                    { 276, "Winona", "Kilback" },
                    { 277, "Nathanael", "Heidenreich" },
                    { 278, "Brayan", "Grimes" },
                    { 279, "Kari", "Weissnat" },
                    { 280, "Angelo", "Hand" },
                    { 281, "Collin", "Lakin" },
                    { 282, "Leonard", "Kertzmann" },
                    { 283, "Newell", "Collier" },
                    { 284, "Glenna", "Wunsch" },
                    { 285, "Deshawn", "Wiza" },
                    { 286, "Erick", "Wintheiser" },
                    { 287, "Cordell", "Barrows" },
                    { 288, "Al", "Murphy" },
                    { 289, "Bianka", "Harvey" },
                    { 290, "Connor", "O'Hara" },
                    { 291, "Sheridan", "Lind" },
                    { 292, "Norene", "Murray" },
                    { 293, "Darryl", "Gleason" },
                    { 294, "Sofia", "Dibbert" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 295, "Elyse", "Rosenbaum" },
                    { 296, "Toy", "Leuschke" },
                    { 297, "Kara", "Hettinger" },
                    { 298, "Cooper", "Dibbert" },
                    { 299, "Talia", "Cormier" },
                    { 300, "Sierra", "Braun" }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 1, "Norbert", "Altenwerth", new DateTime(2018, 4, 25, 7, 11, 58, 175, DateTimeKind.Local).AddTicks(873) },
                    { 2, "Omari", "Bruen", new DateTime(2021, 12, 29, 4, 5, 27, 103, DateTimeKind.Local).AddTicks(9829) },
                    { 3, "Samanta", "Oberbrunner", new DateTime(2023, 5, 21, 3, 47, 0, 633, DateTimeKind.Local).AddTicks(1325) },
                    { 4, "Lilla", "Russel", new DateTime(2017, 9, 18, 5, 36, 54, 699, DateTimeKind.Local).AddTicks(8668) },
                    { 5, "Gerald", "Bauch", new DateTime(2022, 8, 5, 9, 51, 10, 139, DateTimeKind.Local).AddTicks(7692) },
                    { 6, "Olaf", "Hartmann", new DateTime(2018, 8, 18, 7, 55, 13, 600, DateTimeKind.Local).AddTicks(8349) },
                    { 7, "Filiberto", "Haag", new DateTime(2017, 11, 8, 5, 28, 58, 250, DateTimeKind.Local).AddTicks(5863) },
                    { 8, "Hadley", "Olson", new DateTime(2016, 10, 6, 6, 46, 53, 648, DateTimeKind.Local).AddTicks(6289) },
                    { 9, "Creola", "Leuschke", new DateTime(2016, 2, 15, 22, 37, 44, 674, DateTimeKind.Local).AddTicks(2234) },
                    { 10, "Felton", "Legros", new DateTime(2019, 11, 13, 17, 16, 35, 558, DateTimeKind.Local).AddTicks(9766) },
                    { 11, "Ettie", "Kihn", new DateTime(2021, 5, 15, 9, 55, 37, 693, DateTimeKind.Local).AddTicks(1034) },
                    { 12, "Ciara", "Mertz", new DateTime(2019, 11, 2, 12, 38, 11, 980, DateTimeKind.Local).AddTicks(5667) },
                    { 13, "Jessy", "Little", new DateTime(2023, 2, 14, 23, 52, 24, 296, DateTimeKind.Local).AddTicks(6627) },
                    { 14, "Dangelo", "MacGyver", new DateTime(2019, 4, 3, 21, 38, 18, 660, DateTimeKind.Local).AddTicks(864) },
                    { 15, "Max", "Beer", new DateTime(2023, 9, 1, 14, 56, 35, 232, DateTimeKind.Local).AddTicks(2) },
                    { 16, "Amy", "Kulas", new DateTime(2018, 1, 26, 9, 59, 24, 688, DateTimeKind.Local).AddTicks(8429) },
                    { 17, "Joany", "DuBuque", new DateTime(2016, 9, 27, 21, 26, 33, 141, DateTimeKind.Local).AddTicks(7553) },
                    { 18, "Jedediah", "Turner", new DateTime(2022, 2, 15, 16, 38, 3, 336, DateTimeKind.Local).AddTicks(5091) },
                    { 19, "Dexter", "Raynor", new DateTime(2023, 1, 1, 7, 25, 43, 255, DateTimeKind.Local).AddTicks(5714) },
                    { 20, "Jules", "Lang", new DateTime(2017, 3, 3, 3, 28, 52, 694, DateTimeKind.Local).AddTicks(8455) },
                    { 21, "Chasity", "Berge", new DateTime(2017, 2, 2, 10, 33, 50, 535, DateTimeKind.Local).AddTicks(4810) },
                    { 22, "Roxanne", "Marquardt", new DateTime(2020, 10, 9, 3, 26, 28, 729, DateTimeKind.Local).AddTicks(4248) },
                    { 23, "Constance", "Zieme", new DateTime(2019, 7, 22, 12, 51, 29, 466, DateTimeKind.Local).AddTicks(3842) },
                    { 24, "Tina", "Ledner", new DateTime(2022, 7, 17, 7, 26, 56, 633, DateTimeKind.Local).AddTicks(5423) },
                    { 25, "Mylene", "Breitenberg", new DateTime(2020, 6, 15, 23, 43, 3, 640, DateTimeKind.Local).AddTicks(7698) },
                    { 26, "Ulises", "Bailey", new DateTime(2016, 3, 15, 0, 56, 1, 548, DateTimeKind.Local).AddTicks(2748) },
                    { 27, "Idella", "Price", new DateTime(2019, 8, 22, 0, 41, 9, 257, DateTimeKind.Local).AddTicks(2690) },
                    { 28, "Berta", "Gislason", new DateTime(2021, 7, 21, 13, 43, 15, 871, DateTimeKind.Local).AddTicks(2231) },
                    { 29, "Lysanne", "Swaniawski", new DateTime(2021, 1, 22, 2, 30, 49, 276, DateTimeKind.Local).AddTicks(2371) },
                    { 30, "Daryl", "Rutherford", new DateTime(2023, 2, 3, 3, 18, 21, 170, DateTimeKind.Local).AddTicks(9184) },
                    { 31, "Robbie", "Sanford", new DateTime(2021, 1, 11, 15, 10, 55, 71, DateTimeKind.Local).AddTicks(9768) },
                    { 32, "Oscar", "Greenholt", new DateTime(2017, 9, 23, 10, 16, 31, 729, DateTimeKind.Local).AddTicks(8370) },
                    { 33, "Chad", "Parisian", new DateTime(2020, 8, 1, 22, 37, 31, 6, DateTimeKind.Local).AddTicks(7525) },
                    { 34, "Karianne", "Wyman", new DateTime(2019, 7, 8, 10, 20, 14, 169, DateTimeKind.Local).AddTicks(2478) },
                    { 35, "Magnolia", "VonRueden", new DateTime(2021, 4, 10, 7, 32, 25, 873, DateTimeKind.Local).AddTicks(1639) },
                    { 36, "Kavon", "Dooley", new DateTime(2018, 7, 14, 5, 7, 51, 667, DateTimeKind.Local).AddTicks(5501) }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 37, "Adan", "Mante", new DateTime(2017, 1, 25, 13, 1, 10, 586, DateTimeKind.Local).AddTicks(4812) },
                    { 38, "Muriel", "Koelpin", new DateTime(2018, 1, 5, 18, 29, 47, 109, DateTimeKind.Local).AddTicks(3643) },
                    { 39, "Melvin", "Cruickshank", new DateTime(2023, 1, 11, 5, 47, 47, 350, DateTimeKind.Local).AddTicks(3564) },
                    { 40, "Albin", "Kihn", new DateTime(2017, 1, 25, 16, 24, 11, 452, DateTimeKind.Local).AddTicks(5891) },
                    { 41, "Aida", "D'Amore", new DateTime(2016, 4, 14, 19, 37, 0, 55, DateTimeKind.Local).AddTicks(9547) },
                    { 42, "Jorge", "Murphy", new DateTime(2016, 2, 29, 9, 54, 23, 793, DateTimeKind.Local).AddTicks(5673) },
                    { 43, "Lesly", "Zieme", new DateTime(2020, 9, 4, 23, 32, 13, 47, DateTimeKind.Local).AddTicks(2725) },
                    { 44, "Aliyah", "Bogan", new DateTime(2018, 1, 14, 15, 57, 45, 264, DateTimeKind.Local).AddTicks(8394) },
                    { 45, "Selmer", "Feest", new DateTime(2022, 3, 11, 19, 24, 25, 67, DateTimeKind.Local).AddTicks(2792) },
                    { 46, "Kory", "Altenwerth", new DateTime(2021, 8, 14, 15, 8, 22, 773, DateTimeKind.Local).AddTicks(8200) },
                    { 47, "Demetrius", "Wintheiser", new DateTime(2023, 4, 26, 16, 30, 57, 689, DateTimeKind.Local).AddTicks(4467) },
                    { 48, "Maye", "Marquardt", new DateTime(2018, 2, 17, 12, 15, 12, 510, DateTimeKind.Local).AddTicks(7553) },
                    { 49, "Adolph", "Littel", new DateTime(2023, 12, 9, 21, 54, 59, 764, DateTimeKind.Local).AddTicks(7591) },
                    { 50, "Sallie", "O'Kon", new DateTime(2019, 10, 18, 16, 38, 37, 616, DateTimeKind.Local).AddTicks(6331) },
                    { 51, "Joany", "Farrell", new DateTime(2022, 1, 12, 0, 51, 50, 282, DateTimeKind.Local).AddTicks(1794) },
                    { 52, "Matilde", "Lindgren", new DateTime(2021, 2, 12, 20, 39, 25, 994, DateTimeKind.Local).AddTicks(3076) },
                    { 53, "Brigitte", "Macejkovic", new DateTime(2017, 9, 15, 8, 32, 50, 249, DateTimeKind.Local).AddTicks(1720) },
                    { 54, "Timmothy", "Dibbert", new DateTime(2020, 11, 30, 2, 42, 27, 613, DateTimeKind.Local).AddTicks(7465) },
                    { 55, "Pat", "Reynolds", new DateTime(2016, 5, 28, 3, 41, 7, 141, DateTimeKind.Local).AddTicks(8207) },
                    { 56, "Jenifer", "Nolan", new DateTime(2016, 1, 29, 2, 23, 29, 268, DateTimeKind.Local).AddTicks(7546) },
                    { 57, "Robin", "Macejkovic", new DateTime(2018, 5, 4, 13, 54, 46, 270, DateTimeKind.Local).AddTicks(7282) },
                    { 58, "Nola", "Reinger", new DateTime(2023, 3, 21, 3, 36, 17, 149, DateTimeKind.Local).AddTicks(159) },
                    { 59, "Lupe", "Lakin", new DateTime(2023, 3, 19, 16, 5, 24, 420, DateTimeKind.Local).AddTicks(8287) },
                    { 60, "Arlo", "Gaylord", new DateTime(2020, 7, 21, 17, 7, 47, 771, DateTimeKind.Local).AddTicks(1272) },
                    { 61, "Terence", "Hansen", new DateTime(2023, 10, 12, 11, 39, 30, 948, DateTimeKind.Local).AddTicks(8083) },
                    { 62, "Queenie", "Schuster", new DateTime(2016, 12, 19, 20, 46, 18, 888, DateTimeKind.Local).AddTicks(378) },
                    { 63, "Skylar", "Trantow", new DateTime(2018, 6, 20, 6, 35, 21, 274, DateTimeKind.Local).AddTicks(4311) },
                    { 64, "Chad", "Conroy", new DateTime(2019, 5, 15, 21, 4, 11, 534, DateTimeKind.Local).AddTicks(7171) },
                    { 65, "Sally", "Hayes", new DateTime(2016, 5, 10, 23, 38, 24, 679, DateTimeKind.Local).AddTicks(7266) },
                    { 66, "Rasheed", "Haag", new DateTime(2023, 10, 5, 15, 40, 18, 936, DateTimeKind.Local).AddTicks(8023) },
                    { 67, "Kaylee", "Prosacco", new DateTime(2023, 3, 6, 15, 42, 40, 428, DateTimeKind.Local).AddTicks(6290) },
                    { 68, "Mathilde", "Balistreri", new DateTime(2023, 6, 22, 8, 4, 19, 547, DateTimeKind.Local).AddTicks(7041) },
                    { 69, "Theresia", "Rogahn", new DateTime(2021, 6, 23, 6, 34, 29, 599, DateTimeKind.Local).AddTicks(1088) },
                    { 70, "Melba", "Hettinger", new DateTime(2019, 6, 17, 14, 0, 18, 221, DateTimeKind.Local).AddTicks(5724) },
                    { 71, "Alexandra", "Douglas", new DateTime(2023, 9, 4, 16, 25, 33, 538, DateTimeKind.Local).AddTicks(4227) },
                    { 72, "Ferne", "Moen", new DateTime(2019, 12, 6, 4, 53, 13, 891, DateTimeKind.Local).AddTicks(6057) },
                    { 73, "Toni", "Gerhold", new DateTime(2019, 2, 2, 21, 46, 38, 223, DateTimeKind.Local).AddTicks(6589) },
                    { 74, "Deshaun", "King", new DateTime(2017, 7, 10, 7, 35, 28, 176, DateTimeKind.Local).AddTicks(7228) },
                    { 75, "Jazmyne", "Ledner", new DateTime(2023, 5, 12, 20, 53, 46, 901, DateTimeKind.Local).AddTicks(7877) },
                    { 76, "Jarret", "Kilback", new DateTime(2017, 4, 4, 6, 49, 52, 123, DateTimeKind.Local).AddTicks(7461) },
                    { 77, "Kallie", "Bogan", new DateTime(2023, 5, 1, 5, 5, 56, 433, DateTimeKind.Local).AddTicks(7586) },
                    { 78, "Henri", "Hodkiewicz", new DateTime(2019, 6, 25, 3, 37, 50, 790, DateTimeKind.Local).AddTicks(2730) }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 79, "Penelope", "Swaniawski", new DateTime(2023, 7, 5, 16, 14, 41, 732, DateTimeKind.Local).AddTicks(374) },
                    { 80, "Ewell", "Bartell", new DateTime(2022, 6, 2, 8, 11, 18, 216, DateTimeKind.Local).AddTicks(8301) },
                    { 81, "Joan", "Bartell", new DateTime(2019, 2, 22, 15, 35, 56, 770, DateTimeKind.Local).AddTicks(8752) },
                    { 82, "Prudence", "Kutch", new DateTime(2019, 1, 22, 8, 55, 1, 956, DateTimeKind.Local).AddTicks(2704) },
                    { 83, "Emmitt", "Friesen", new DateTime(2023, 12, 15, 21, 3, 5, 873, DateTimeKind.Local).AddTicks(8018) },
                    { 84, "Candida", "Barrows", new DateTime(2021, 11, 25, 2, 4, 47, 239, DateTimeKind.Local).AddTicks(9721) },
                    { 85, "Mercedes", "Nienow", new DateTime(2020, 3, 22, 20, 0, 31, 507, DateTimeKind.Local).AddTicks(7928) },
                    { 86, "Brian", "Hoeger", new DateTime(2016, 4, 14, 10, 34, 38, 600, DateTimeKind.Local).AddTicks(8672) },
                    { 87, "Scot", "Bogan", new DateTime(2021, 5, 28, 16, 24, 48, 59, DateTimeKind.Local).AddTicks(5798) },
                    { 88, "Yvonne", "Heidenreich", new DateTime(2020, 7, 13, 10, 1, 36, 218, DateTimeKind.Local).AddTicks(550) },
                    { 89, "Sandra", "Shanahan", new DateTime(2019, 8, 4, 1, 2, 15, 364, DateTimeKind.Local).AddTicks(6096) },
                    { 90, "Maud", "Kozey", new DateTime(2019, 3, 30, 1, 16, 16, 116, DateTimeKind.Local).AddTicks(5912) },
                    { 91, "Chesley", "McClure", new DateTime(2019, 1, 4, 6, 23, 31, 757, DateTimeKind.Local).AddTicks(715) },
                    { 92, "Yessenia", "Terry", new DateTime(2021, 1, 12, 10, 27, 40, 467, DateTimeKind.Local).AddTicks(835) },
                    { 93, "Sylvia", "Franecki", new DateTime(2016, 8, 27, 21, 8, 54, 450, DateTimeKind.Local).AddTicks(102) },
                    { 94, "Perry", "Cruickshank", new DateTime(2018, 3, 29, 21, 32, 35, 46, DateTimeKind.Local).AddTicks(1422) },
                    { 95, "Erik", "Cronin", new DateTime(2016, 2, 21, 20, 59, 56, 87, DateTimeKind.Local).AddTicks(7851) },
                    { 96, "Scottie", "Hoeger", new DateTime(2016, 10, 2, 4, 55, 10, 22, DateTimeKind.Local).AddTicks(7431) },
                    { 97, "Hillary", "Schneider", new DateTime(2018, 9, 16, 3, 15, 3, 504, DateTimeKind.Local).AddTicks(429) },
                    { 98, "Camille", "Greenfelder", new DateTime(2019, 4, 16, 9, 4, 55, 502, DateTimeKind.Local).AddTicks(5900) },
                    { 99, "Valentina", "Lueilwitz", new DateTime(2019, 8, 15, 5, 37, 21, 452, DateTimeKind.Local).AddTicks(7053) },
                    { 100, "Yolanda", "Dickinson", new DateTime(2022, 3, 12, 20, 52, 36, 741, DateTimeKind.Local).AddTicks(5594) }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 1, 49, 83.291133689133305m, new DateTime(2023, 6, 12, 13, 46, 30, 424, DateTimeKind.Local).AddTicks(3173), "whiteboard rich systems" },
                    { 2, 12, 52.869954324156345m, new DateTime(2022, 4, 12, 14, 51, 30, 763, DateTimeKind.Local).AddTicks(1765), "enable ubiquitous synergies" },
                    { 3, 7, 89.331735119600770m, new DateTime(2019, 1, 21, 12, 41, 3, 258, DateTimeKind.Local).AddTicks(270), "enable open-source synergies" },
                    { 4, 13, 46.455077303854710m, new DateTime(2023, 4, 9, 23, 26, 28, 380, DateTimeKind.Local).AddTicks(3753), "enable leading-edge models" },
                    { 5, 28, 87.349857639477775m, new DateTime(2018, 3, 2, 15, 39, 41, 66, DateTimeKind.Local).AddTicks(5494), "empower B2B e-business" },
                    { 6, 36, 31.891526093904545m, new DateTime(2020, 11, 30, 11, 9, 37, 170, DateTimeKind.Local).AddTicks(9652), "maximize clicks-and-mortar supply-chains" },
                    { 7, 37, 71.753074874035505m, new DateTime(2022, 10, 2, 10, 22, 6, 566, DateTimeKind.Local).AddTicks(939), "enhance intuitive experiences" },
                    { 8, 54, 90.017310988523740m, new DateTime(2014, 6, 1, 8, 14, 33, 242, DateTimeKind.Local).AddTicks(1871), "recontextualize dot-com systems" },
                    { 9, 33, 14.3593016090321330m, new DateTime(2020, 1, 9, 14, 4, 22, 159, DateTimeKind.Local).AddTicks(4794), "harness user-centric synergies" },
                    { 10, 40, 64.291145047673880m, new DateTime(2019, 3, 13, 10, 8, 36, 111, DateTimeKind.Local).AddTicks(1797), "e-enable frictionless solutions" },
                    { 11, 76, 29.226603713682890m, new DateTime(2021, 7, 21, 17, 55, 3, 487, DateTimeKind.Local).AddTicks(3492), "cultivate vertical web-readiness" },
                    { 12, 62, 32.449742197416560m, new DateTime(2023, 12, 13, 21, 11, 31, 388, DateTimeKind.Local).AddTicks(4209), "generate turn-key eyeballs" },
                    { 13, 93, 17.195462750525715m, new DateTime(2021, 9, 28, 23, 15, 16, 661, DateTimeKind.Local).AddTicks(2102), "extend B2B architectures" },
                    { 14, 52, 78.875873221320395m, new DateTime(2015, 6, 15, 15, 26, 5, 174, DateTimeKind.Local).AddTicks(2300), "redefine cutting-edge methodologies" },
                    { 15, 93, 14.106700255335490m, new DateTime(2015, 6, 30, 16, 4, 49, 296, DateTimeKind.Local).AddTicks(2703), "grow clicks-and-mortar partnerships" },
                    { 16, 64, 80.552888420083270m, new DateTime(2019, 6, 16, 14, 38, 36, 676, DateTimeKind.Local).AddTicks(7291), "deploy plug-and-play synergies" },
                    { 17, 30, 31.632217063698690m, new DateTime(2023, 8, 11, 4, 50, 54, 662, DateTimeKind.Local).AddTicks(9717), "expedite bleeding-edge infomediaries" },
                    { 18, 45, 69.631008213422630m, new DateTime(2016, 8, 3, 6, 25, 15, 382, DateTimeKind.Local).AddTicks(616), "benchmark 24/7 e-services" },
                    { 19, 52, 73.812245333361405m, new DateTime(2019, 7, 9, 15, 36, 14, 456, DateTimeKind.Local).AddTicks(6526), "empower distributed bandwidth" },
                    { 20, 49, 49.947048337661960m, new DateTime(2014, 8, 19, 5, 23, 40, 715, DateTimeKind.Local).AddTicks(6777), "transition synergistic synergies" },
                    { 21, 18, 43.508583897038840m, new DateTime(2023, 11, 4, 7, 51, 43, 562, DateTimeKind.Local).AddTicks(4599), "morph real-time infrastructures" },
                    { 22, 97, 30.372039008468955m, new DateTime(2017, 6, 25, 7, 30, 59, 89, DateTimeKind.Local).AddTicks(3405), "maximize cross-media markets" },
                    { 23, 55, 31.21714377244885m, new DateTime(2021, 9, 18, 1, 44, 43, 228, DateTimeKind.Local).AddTicks(4095), "streamline proactive methodologies" },
                    { 24, 21, 89.783009933529045m, new DateTime(2016, 10, 24, 11, 8, 28, 838, DateTimeKind.Local).AddTicks(3066), "strategize open-source experiences" },
                    { 25, 67, 33.216535623609180m, new DateTime(2017, 1, 8, 6, 44, 37, 546, DateTimeKind.Local).AddTicks(2724), "target wireless e-services" },
                    { 26, 18, 59.477509078704010m, new DateTime(2019, 5, 18, 6, 43, 47, 963, DateTimeKind.Local).AddTicks(1581), "utilize cutting-edge supply-chains" },
                    { 27, 76, 48.018983680602325m, new DateTime(2015, 6, 26, 11, 13, 21, 683, DateTimeKind.Local).AddTicks(5318), "unleash leading-edge experiences" },
                    { 28, 7, 10.2394834260187270m, new DateTime(2016, 1, 28, 18, 4, 3, 184, DateTimeKind.Local).AddTicks(2588), "implement vertical methodologies" },
                    { 29, 20, 93.698851810369790m, new DateTime(2017, 11, 3, 23, 22, 52, 772, DateTimeKind.Local).AddTicks(8192), "enable viral relationships" },
                    { 30, 85, 59.70282541905680m, new DateTime(2022, 3, 30, 13, 28, 7, 190, DateTimeKind.Local).AddTicks(5759), "engineer proactive solutions" },
                    { 31, 95, 89.230923888125065m, new DateTime(2023, 7, 28, 8, 26, 53, 943, DateTimeKind.Local).AddTicks(4770), "leverage compelling e-markets" },
                    { 32, 28, 49.95536415388035m, new DateTime(2022, 8, 18, 10, 41, 34, 219, DateTimeKind.Local).AddTicks(8188), "aggregate proactive content" },
                    { 33, 100, 55.115372866839815m, new DateTime(2022, 12, 30, 6, 6, 55, 565, DateTimeKind.Local).AddTicks(1507), "unleash leading-edge e-services" },
                    { 34, 5, 50.447201703110085m, new DateTime(2015, 5, 8, 16, 7, 45, 319, DateTimeKind.Local).AddTicks(4881), "matrix cross-media communities" },
                    { 35, 69, 67.110519559473120m, new DateTime(2022, 8, 2, 15, 14, 36, 344, DateTimeKind.Local).AddTicks(8985), "e-enable out-of-the-box supply-chains" },
                    { 36, 16, 98.057813406172740m, new DateTime(2021, 6, 17, 4, 7, 51, 187, DateTimeKind.Local).AddTicks(3524), "architect real-time supply-chains" },
                    { 37, 99, 13.4201841485878960m, new DateTime(2016, 7, 29, 17, 31, 57, 820, DateTimeKind.Local).AddTicks(7784), "leverage end-to-end applications" },
                    { 38, 30, 63.98902407863035m, new DateTime(2020, 2, 2, 13, 36, 3, 2, DateTimeKind.Local).AddTicks(7292), "deploy interactive vortals" },
                    { 39, 96, 37.381870758732585m, new DateTime(2016, 9, 24, 3, 14, 41, 560, DateTimeKind.Local).AddTicks(30), "empower world-class paradigms" },
                    { 40, 53, 77.442154948327220m, new DateTime(2018, 11, 22, 3, 35, 44, 242, DateTimeKind.Local).AddTicks(2766), "monetize web-enabled networks" },
                    { 41, 93, 32.318898700138025m, new DateTime(2020, 4, 22, 21, 59, 15, 900, DateTimeKind.Local).AddTicks(5459), "visualize impactful supply-chains" },
                    { 42, 28, 23.410670486794490m, new DateTime(2017, 7, 12, 4, 29, 51, 95, DateTimeKind.Local).AddTicks(8012), "repurpose magnetic content" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 43, 97, 89.107108410111825m, new DateTime(2023, 8, 16, 23, 3, 35, 981, DateTimeKind.Local).AddTicks(4630), "engage seamless infrastructures" },
                    { 44, 25, 88.635852388717180m, new DateTime(2021, 6, 22, 19, 53, 9, 971, DateTimeKind.Local).AddTicks(4666), "engineer out-of-the-box synergies" },
                    { 45, 87, 25.207660128899535m, new DateTime(2023, 10, 25, 11, 21, 31, 142, DateTimeKind.Local).AddTicks(7154), "extend compelling markets" },
                    { 46, 8, 69.49521419076435m, new DateTime(2022, 2, 1, 7, 30, 45, 326, DateTimeKind.Local).AddTicks(2547), "enhance proactive relationships" },
                    { 47, 10, 5.22516162286625415m, new DateTime(2015, 6, 16, 6, 12, 42, 950, DateTimeKind.Local).AddTicks(8391), "orchestrate 24/365 relationships" },
                    { 48, 97, 7.1080882624847245m, new DateTime(2022, 4, 9, 12, 56, 4, 127, DateTimeKind.Local).AddTicks(4064), "leverage web-enabled metrics" },
                    { 49, 53, 40.310029807981680m, new DateTime(2020, 12, 15, 0, 41, 41, 608, DateTimeKind.Local).AddTicks(9889), "exploit proactive infomediaries" },
                    { 50, 54, 40.326090530334040m, new DateTime(2023, 11, 25, 17, 36, 14, 566, DateTimeKind.Local).AddTicks(5995), "synthesize vertical technologies" },
                    { 51, 53, 75.851371441870280m, new DateTime(2015, 9, 24, 11, 44, 1, 102, DateTimeKind.Local).AddTicks(2436), "cultivate customized bandwidth" },
                    { 52, 14, 46.482490291691685m, new DateTime(2021, 10, 13, 8, 1, 42, 257, DateTimeKind.Local).AddTicks(9593), "exploit real-time channels" },
                    { 53, 34, 5.61110546084107310m, new DateTime(2015, 11, 14, 16, 10, 37, 23, DateTimeKind.Local).AddTicks(5875), "repurpose compelling web-readiness" },
                    { 54, 61, 8.6495005592363185m, new DateTime(2024, 2, 4, 10, 13, 49, 317, DateTimeKind.Local).AddTicks(1506), "enable B2B architectures" },
                    { 55, 24, 39.330508809643520m, new DateTime(2020, 6, 29, 4, 9, 19, 987, DateTimeKind.Local).AddTicks(1278), "deploy virtual infomediaries" },
                    { 56, 46, 40.026869946084830m, new DateTime(2016, 1, 21, 1, 42, 6, 74, DateTimeKind.Local).AddTicks(5386), "extend cutting-edge e-markets" },
                    { 57, 96, 80.867021609698355m, new DateTime(2019, 5, 3, 20, 34, 7, 835, DateTimeKind.Local).AddTicks(1477), "syndicate cross-platform networks" },
                    { 58, 63, 33.486307140443655m, new DateTime(2017, 9, 11, 7, 33, 4, 6, DateTimeKind.Local).AddTicks(5524), "facilitate user-centric ROI" },
                    { 59, 29, 80.030083495272520m, new DateTime(2017, 9, 17, 23, 25, 1, 825, DateTimeKind.Local).AddTicks(3597), "deploy real-time supply-chains" },
                    { 60, 50, 77.24773432281335m, new DateTime(2015, 3, 30, 14, 55, 28, 401, DateTimeKind.Local).AddTicks(5419), "synergize front-end initiatives" },
                    { 61, 76, 23.909339728828455m, new DateTime(2015, 8, 6, 3, 31, 50, 201, DateTimeKind.Local).AddTicks(4659), "harness scalable metrics" },
                    { 62, 10, 92.57387176498925m, new DateTime(2016, 2, 12, 18, 28, 43, 548, DateTimeKind.Local).AddTicks(5853), "recontextualize frictionless blockchains" },
                    { 63, 48, 29.304338533796425m, new DateTime(2020, 9, 16, 7, 19, 59, 737, DateTimeKind.Local).AddTicks(6880), "leverage out-of-the-box bandwidth" },
                    { 64, 24, 19.519200560840165m, new DateTime(2022, 5, 18, 7, 43, 51, 145, DateTimeKind.Local).AddTicks(6794), "strategize efficient synergies" },
                    { 65, 24, 78.752585741916560m, new DateTime(2017, 7, 21, 20, 24, 8, 19, DateTimeKind.Local).AddTicks(7634), "iterate impactful vortals" },
                    { 66, 55, 40.745969945958620m, new DateTime(2015, 9, 22, 11, 15, 59, 500, DateTimeKind.Local).AddTicks(6004), "engage out-of-the-box schemas" },
                    { 67, 93, 93.723813340985540m, new DateTime(2016, 6, 1, 3, 12, 23, 416, DateTimeKind.Local).AddTicks(1907), "innovate distributed action-items" },
                    { 68, 7, 52.846447750215020m, new DateTime(2023, 8, 22, 19, 37, 25, 408, DateTimeKind.Local).AddTicks(5560), "implement compelling action-items" },
                    { 69, 62, 51.160246838776330m, new DateTime(2017, 5, 30, 20, 5, 26, 220, DateTimeKind.Local).AddTicks(4994), "utilize plug-and-play deliverables" },
                    { 70, 47, 60.316078974468780m, new DateTime(2018, 3, 26, 6, 6, 25, 585, DateTimeKind.Local).AddTicks(3013), "streamline 24/365 blockchains" },
                    { 71, 69, 97.384675161193080m, new DateTime(2019, 7, 24, 18, 27, 25, 792, DateTimeKind.Local).AddTicks(4240), "utilize real-time synergies" },
                    { 72, 42, 59.066253776549385m, new DateTime(2017, 1, 12, 3, 24, 24, 116, DateTimeKind.Local).AddTicks(3258), "engineer back-end blockchains" },
                    { 73, 1, 49.659659367084510m, new DateTime(2021, 8, 17, 2, 1, 2, 7, DateTimeKind.Local).AddTicks(8079), "target strategic experiences" },
                    { 74, 40, 44.213509460077930m, new DateTime(2022, 10, 30, 10, 32, 5, 991, DateTimeKind.Local).AddTicks(1778), "reintermediate world-class deliverables" },
                    { 75, 61, 81.602855703496930m, new DateTime(2023, 8, 5, 12, 45, 36, 442, DateTimeKind.Local).AddTicks(8211), "repurpose global e-commerce" },
                    { 76, 34, 91.009852275387260m, new DateTime(2014, 11, 15, 17, 55, 53, 203, DateTimeKind.Local).AddTicks(8313), "aggregate impactful technologies" },
                    { 77, 72, 6.0235753018742585m, new DateTime(2022, 2, 4, 7, 30, 29, 66, DateTimeKind.Local).AddTicks(220), "unleash mission-critical synergies" },
                    { 78, 14, 60.515683541650690m, new DateTime(2016, 3, 24, 20, 49, 8, 410, DateTimeKind.Local).AddTicks(6980), "leverage dynamic eyeballs" },
                    { 79, 22, 16.096151817169080m, new DateTime(2015, 11, 3, 12, 21, 0, 961, DateTimeKind.Local).AddTicks(9397), "expedite out-of-the-box e-business" },
                    { 80, 29, 7.9815105689283445m, new DateTime(2019, 6, 26, 11, 25, 29, 640, DateTimeKind.Local).AddTicks(6395), "synthesize back-end markets" },
                    { 81, 70, 97.261746769008040m, new DateTime(2016, 12, 1, 4, 7, 58, 228, DateTimeKind.Local).AddTicks(6822), "embrace web-enabled content" },
                    { 82, 68, 6.2757821651182255m, new DateTime(2014, 11, 26, 1, 10, 1, 850, DateTimeKind.Local).AddTicks(3527), "utilize holistic vortals" },
                    { 83, 15, 65.97981327636235m, new DateTime(2020, 5, 6, 16, 25, 28, 879, DateTimeKind.Local).AddTicks(654), "incubate seamless vortals" },
                    { 84, 44, 89.179861681477180m, new DateTime(2017, 6, 7, 18, 41, 8, 16, DateTimeKind.Local).AddTicks(855), "deploy viral content" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 85, 11, 39.64888631573785m, new DateTime(2023, 10, 22, 22, 15, 16, 384, DateTimeKind.Local).AddTicks(4928), "empower cross-media convergence" },
                    { 86, 83, 39.761387984265430m, new DateTime(2020, 12, 14, 22, 39, 8, 579, DateTimeKind.Local).AddTicks(2315), "synergize web-enabled e-markets" },
                    { 87, 30, 78.88268642364335m, new DateTime(2017, 9, 18, 7, 5, 0, 352, DateTimeKind.Local).AddTicks(8163), "facilitate B2B solutions" },
                    { 88, 62, 57.111018430375995m, new DateTime(2021, 5, 6, 11, 0, 39, 214, DateTimeKind.Local).AddTicks(9658), "reintermediate bleeding-edge paradigms" },
                    { 89, 55, 51.070822951938040m, new DateTime(2017, 8, 15, 1, 40, 32, 596, DateTimeKind.Local).AddTicks(1384), "aggregate B2B systems" },
                    { 90, 41, 42.319295260215230m, new DateTime(2018, 12, 6, 21, 35, 48, 453, DateTimeKind.Local).AddTicks(4360), "drive robust solutions" },
                    { 91, 93, 25.279982602021355m, new DateTime(2019, 10, 27, 7, 33, 18, 85, DateTimeKind.Local).AddTicks(9764), "enhance vertical e-commerce" },
                    { 92, 80, 40.224894268311080m, new DateTime(2023, 9, 23, 21, 46, 58, 128, DateTimeKind.Local).AddTicks(8760), "visualize innovative experiences" },
                    { 93, 55, 8.0742546593678080m, new DateTime(2019, 10, 8, 1, 14, 50, 177, DateTimeKind.Local).AddTicks(5004), "transition back-end models" },
                    { 94, 18, 41.331258667523570m, new DateTime(2015, 6, 12, 1, 2, 23, 297, DateTimeKind.Local).AddTicks(129), "mesh frictionless portals" },
                    { 95, 75, 63.15144711441020m, new DateTime(2018, 1, 14, 19, 19, 22, 143, DateTimeKind.Local).AddTicks(5383), "mesh value-added metrics" },
                    { 96, 99, 54.859355978110055m, new DateTime(2016, 7, 27, 20, 55, 51, 635, DateTimeKind.Local).AddTicks(7117), "brand granular partnerships" },
                    { 97, 13, 94.797109104539760m, new DateTime(2021, 5, 12, 15, 15, 58, 82, DateTimeKind.Local).AddTicks(150), "synthesize cutting-edge web-readiness" },
                    { 98, 29, 22.637781702327880m, new DateTime(2014, 5, 13, 17, 50, 59, 59, DateTimeKind.Local).AddTicks(8882), "enable compelling ROI" },
                    { 99, 42, 16.280123215096885m, new DateTime(2021, 5, 28, 5, 1, 40, 743, DateTimeKind.Local).AddTicks(3816), "iterate intuitive e-tailers" },
                    { 100, 22, 11.4738549214747045m, new DateTime(2016, 7, 25, 16, 29, 5, 412, DateTimeKind.Local).AddTicks(9863), "seize proactive e-business" },
                    { 101, 51, 29.353914426589785m, new DateTime(2020, 8, 1, 9, 41, 14, 800, DateTimeKind.Local).AddTicks(2591), "implement extensible technologies" },
                    { 102, 53, 87.607024842706090m, new DateTime(2022, 4, 13, 14, 12, 50, 838, DateTimeKind.Local).AddTicks(1268), "revolutionize dynamic e-services" },
                    { 103, 38, 84.409801090519025m, new DateTime(2018, 8, 16, 14, 17, 16, 259, DateTimeKind.Local).AddTicks(2047), "reintermediate virtual technologies" },
                    { 104, 36, 43.763461940227315m, new DateTime(2019, 1, 9, 1, 33, 10, 871, DateTimeKind.Local).AddTicks(7680), "streamline revolutionary e-tailers" },
                    { 105, 92, 52.877096508796215m, new DateTime(2023, 11, 13, 21, 15, 59, 376, DateTimeKind.Local).AddTicks(240), "maximize proactive paradigms" },
                    { 106, 34, 68.074490490608310m, new DateTime(2017, 4, 29, 7, 13, 56, 890, DateTimeKind.Local).AddTicks(3095), "engineer virtual methodologies" },
                    { 107, 20, 58.816884057687355m, new DateTime(2021, 1, 12, 15, 35, 51, 637, DateTimeKind.Local).AddTicks(7812), "incentivize global blockchains" },
                    { 108, 97, 88.330997212781455m, new DateTime(2020, 2, 16, 14, 2, 25, 758, DateTimeKind.Local).AddTicks(8543), "disintermediate one-to-one communities" },
                    { 109, 36, 16.943637400716545m, new DateTime(2023, 7, 19, 20, 2, 20, 314, DateTimeKind.Local).AddTicks(981), "embrace interactive partnerships" },
                    { 110, 54, 15.262058360498045m, new DateTime(2019, 9, 1, 10, 56, 48, 5, DateTimeKind.Local).AddTicks(6353), "whiteboard collaborative systems" },
                    { 111, 49, 94.27117563077925m, new DateTime(2016, 6, 5, 22, 8, 56, 445, DateTimeKind.Local).AddTicks(5149), "innovate back-end bandwidth" },
                    { 112, 75, 11.1114663885126670m, new DateTime(2022, 5, 15, 23, 10, 5, 48, DateTimeKind.Local).AddTicks(1410), "generate customized systems" },
                    { 113, 39, 15.89117000913595m, new DateTime(2021, 7, 10, 13, 37, 43, 411, DateTimeKind.Local).AddTicks(5152), "repurpose end-to-end metrics" },
                    { 114, 51, 21.914284247534555m, new DateTime(2019, 5, 30, 7, 46, 31, 229, DateTimeKind.Local).AddTicks(823), "benchmark viral paradigms" },
                    { 115, 93, 43.69765991371015m, new DateTime(2015, 6, 21, 12, 54, 22, 387, DateTimeKind.Local).AddTicks(6550), "exploit robust partnerships" },
                    { 116, 91, 83.365802125361770m, new DateTime(2019, 2, 13, 3, 27, 0, 306, DateTimeKind.Local).AddTicks(4601), "monetize sexy metrics" },
                    { 117, 74, 73.92446171165895m, new DateTime(2014, 9, 12, 11, 45, 33, 920, DateTimeKind.Local).AddTicks(8976), "extend synergistic technologies" },
                    { 118, 2, 99.583409264857495m, new DateTime(2023, 8, 29, 3, 7, 53, 205, DateTimeKind.Local).AddTicks(7400), "cultivate next-generation markets" },
                    { 119, 28, 39.751697801942570m, new DateTime(2014, 12, 7, 17, 16, 30, 650, DateTimeKind.Local).AddTicks(5186), "reintermediate collaborative experiences" },
                    { 120, 16, 21.607367709171560m, new DateTime(2015, 1, 13, 14, 46, 44, 323, DateTimeKind.Local).AddTicks(2024), "implement cross-platform users" },
                    { 121, 30, 93.594262133275745m, new DateTime(2018, 6, 14, 23, 14, 38, 997, DateTimeKind.Local).AddTicks(8943), "disintermediate end-to-end portals" },
                    { 122, 29, 81.916684493990510m, new DateTime(2019, 12, 17, 7, 0, 56, 564, DateTimeKind.Local).AddTicks(589), "enhance enterprise web services" },
                    { 123, 87, 55.150476608434715m, new DateTime(2016, 8, 11, 13, 1, 39, 574, DateTimeKind.Local).AddTicks(4716), "visualize customized paradigms" },
                    { 124, 43, 28.304769955750745m, new DateTime(2016, 1, 18, 22, 13, 16, 141, DateTimeKind.Local).AddTicks(9302), "matrix rich ROI" },
                    { 125, 37, 10.4995202624137960m, new DateTime(2019, 11, 21, 20, 6, 34, 306, DateTimeKind.Local).AddTicks(9631), "transform seamless action-items" },
                    { 126, 45, 35.321555222273520m, new DateTime(2021, 7, 2, 5, 14, 22, 20, DateTimeKind.Local).AddTicks(83), "harness sexy blockchains" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 127, 92, 24.757446109377425m, new DateTime(2023, 3, 15, 23, 44, 14, 625, DateTimeKind.Local).AddTicks(7497), "whiteboard 24/365 networks" },
                    { 128, 67, 66.137470344513730m, new DateTime(2022, 1, 11, 9, 13, 51, 506, DateTimeKind.Local).AddTicks(4713), "scale value-added mindshare" },
                    { 129, 43, 44.10145755182020m, new DateTime(2016, 3, 21, 0, 30, 5, 2, DateTimeKind.Local).AddTicks(2692), "expedite e-business bandwidth" },
                    { 130, 11, 32.958019767976270m, new DateTime(2017, 12, 28, 18, 56, 17, 103, DateTimeKind.Local).AddTicks(7173), "innovate scalable methodologies" },
                    { 131, 11, 70.168021185742420m, new DateTime(2014, 6, 18, 5, 39, 37, 725, DateTimeKind.Local).AddTicks(8022), "orchestrate vertical niches" },
                    { 132, 46, 24.19117993533905m, new DateTime(2020, 12, 10, 0, 24, 22, 778, DateTimeKind.Local).AddTicks(6460), "productize synergistic interfaces" },
                    { 133, 70, 51.631998342858205m, new DateTime(2022, 4, 16, 18, 38, 53, 507, DateTimeKind.Local).AddTicks(3794), "engage distributed systems" },
                    { 134, 42, 97.081919207725305m, new DateTime(2016, 8, 13, 17, 24, 28, 921, DateTimeKind.Local).AddTicks(2854), "e-enable efficient eyeballs" },
                    { 135, 68, 62.023728616134695m, new DateTime(2023, 10, 22, 19, 43, 17, 475, DateTimeKind.Local).AddTicks(1133), "enhance cross-media content" },
                    { 136, 53, 7.2224829147304470m, new DateTime(2021, 3, 1, 19, 18, 55, 441, DateTimeKind.Local).AddTicks(1624), "maximize visionary initiatives" },
                    { 137, 24, 98.988686656973240m, new DateTime(2018, 2, 1, 12, 36, 29, 625, DateTimeKind.Local).AddTicks(9790), "empower global relationships" },
                    { 138, 10, 68.001382715977555m, new DateTime(2017, 2, 18, 7, 23, 23, 633, DateTimeKind.Local).AddTicks(466), "syndicate seamless e-business" },
                    { 139, 56, 61.631725577035265m, new DateTime(2017, 1, 17, 8, 52, 59, 841, DateTimeKind.Local).AddTicks(7221), "monetize B2B action-items" },
                    { 140, 60, 47.914256816136280m, new DateTime(2023, 9, 25, 20, 38, 11, 486, DateTimeKind.Local).AddTicks(1535), "matrix mission-critical solutions" },
                    { 141, 23, 62.174759820995735m, new DateTime(2020, 4, 11, 7, 47, 58, 75, DateTimeKind.Local).AddTicks(8575), "incentivize collaborative eyeballs" },
                    { 142, 75, 16.682230713548595m, new DateTime(2023, 10, 13, 3, 0, 58, 5, DateTimeKind.Local).AddTicks(3631), "implement one-to-one paradigms" },
                    { 143, 43, 64.329294113111910m, new DateTime(2023, 12, 27, 17, 18, 57, 602, DateTimeKind.Local).AddTicks(2860), "engineer web-enabled eyeballs" },
                    { 144, 25, 34.396270139259970m, new DateTime(2022, 9, 7, 16, 2, 54, 598, DateTimeKind.Local).AddTicks(2418), "optimize enterprise technologies" },
                    { 145, 100, 74.405126748810755m, new DateTime(2021, 11, 2, 9, 9, 5, 247, DateTimeKind.Local).AddTicks(5951), "brand compelling models" },
                    { 146, 47, 61.202651175390905m, new DateTime(2019, 4, 26, 19, 5, 55, 166, DateTimeKind.Local).AddTicks(4194), "transform holistic infrastructures" },
                    { 147, 29, 53.395986606607740m, new DateTime(2023, 3, 20, 7, 8, 40, 570, DateTimeKind.Local).AddTicks(1117), "revolutionize 24/7 channels" },
                    { 148, 20, 88.643909090428410m, new DateTime(2023, 3, 6, 19, 52, 47, 176, DateTimeKind.Local).AddTicks(6072), "unleash out-of-the-box solutions" },
                    { 149, 72, 19.616318181089055m, new DateTime(2017, 8, 16, 12, 56, 18, 484, DateTimeKind.Local).AddTicks(5629), "incentivize viral interfaces" },
                    { 150, 14, 12.1304809574264810m, new DateTime(2014, 10, 12, 12, 25, 30, 833, DateTimeKind.Local).AddTicks(8489), "transform robust portals" },
                    { 151, 16, 66.352821446713215m, new DateTime(2016, 10, 14, 12, 54, 55, 179, DateTimeKind.Local).AddTicks(5393), "architect open-source users" },
                    { 152, 95, 26.19192362042880m, new DateTime(2020, 6, 30, 4, 2, 23, 846, DateTimeKind.Local).AddTicks(7040), "recontextualize dynamic portals" },
                    { 153, 10, 45.961666875114885m, new DateTime(2017, 1, 6, 16, 36, 51, 151, DateTimeKind.Local).AddTicks(564), "unleash robust ROI" },
                    { 154, 28, 69.071144983360285m, new DateTime(2021, 10, 27, 12, 22, 5, 48, DateTimeKind.Local).AddTicks(5096), "empower 24/7 infrastructures" },
                    { 155, 18, 51.506049322506490m, new DateTime(2015, 3, 14, 9, 35, 53, 929, DateTimeKind.Local).AddTicks(3802), "recontextualize efficient convergence" },
                    { 156, 18, 84.728209154386980m, new DateTime(2016, 1, 18, 22, 19, 54, 979, DateTimeKind.Local).AddTicks(9760), "leverage customized bandwidth" },
                    { 157, 30, 40.9232547201975m, new DateTime(2020, 1, 1, 14, 15, 41, 348, DateTimeKind.Local).AddTicks(4733), "brand strategic solutions" },
                    { 158, 55, 89.005118925472805m, new DateTime(2014, 6, 30, 12, 6, 17, 74, DateTimeKind.Local).AddTicks(6901), "embrace B2B models" },
                    { 159, 8, 23.836555426231705m, new DateTime(2024, 1, 13, 7, 53, 22, 668, DateTimeKind.Local).AddTicks(8633), "incentivize B2B initiatives" },
                    { 160, 92, 44.333147469625235m, new DateTime(2015, 10, 6, 21, 8, 16, 558, DateTimeKind.Local).AddTicks(6175), "reintermediate best-of-breed relationships" },
                    { 161, 12, 80.281757265992490m, new DateTime(2022, 8, 8, 15, 51, 47, 430, DateTimeKind.Local).AddTicks(5509), "redefine frictionless content" },
                    { 162, 75, 50.93389099400330m, new DateTime(2017, 10, 25, 14, 14, 14, 29, DateTimeKind.Local).AddTicks(8912), "iterate value-added bandwidth" },
                    { 163, 6, 20.745832828176465m, new DateTime(2016, 11, 11, 14, 5, 26, 144, DateTimeKind.Local).AddTicks(5015), "embrace scalable channels" },
                    { 164, 39, 53.558111767576175m, new DateTime(2014, 4, 26, 8, 10, 32, 237, DateTimeKind.Local).AddTicks(4657), "enhance turn-key infomediaries" },
                    { 165, 58, 87.607154651548170m, new DateTime(2022, 6, 1, 8, 17, 57, 24, DateTimeKind.Local).AddTicks(1488), "scale scalable convergence" },
                    { 166, 51, 30.192192423414655m, new DateTime(2023, 3, 18, 9, 23, 22, 557, DateTimeKind.Local).AddTicks(9625), "embrace cross-platform e-services" },
                    { 167, 7, 69.657329431495440m, new DateTime(2014, 4, 24, 6, 49, 21, 912, DateTimeKind.Local).AddTicks(8169), "engage efficient mindshare" },
                    { 168, 53, 42.584282576163070m, new DateTime(2023, 11, 13, 21, 59, 26, 672, DateTimeKind.Local).AddTicks(6411), "embrace extensible initiatives" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 169, 28, 38.615624119275680m, new DateTime(2017, 4, 27, 5, 46, 1, 485, DateTimeKind.Local).AddTicks(6977), "revolutionize revolutionary architectures" },
                    { 170, 85, 45.964720211675920m, new DateTime(2022, 7, 21, 5, 6, 35, 210, DateTimeKind.Local).AddTicks(5790), "strategize cutting-edge bandwidth" },
                    { 171, 2, 49.073331009201985m, new DateTime(2020, 10, 12, 20, 31, 17, 462, DateTimeKind.Local).AddTicks(2097), "harness open-source content" },
                    { 172, 50, 15.677414783289690m, new DateTime(2020, 10, 14, 21, 56, 39, 463, DateTimeKind.Local).AddTicks(7963), "syndicate collaborative relationships" },
                    { 173, 16, 81.020964642270535m, new DateTime(2018, 12, 13, 7, 39, 25, 554, DateTimeKind.Local).AddTicks(6295), "embrace visionary infomediaries" },
                    { 174, 40, 31.461444405392010m, new DateTime(2019, 2, 25, 6, 13, 46, 815, DateTimeKind.Local).AddTicks(3072), "leverage dynamic schemas" },
                    { 175, 31, 82.114974962952810m, new DateTime(2020, 2, 25, 10, 6, 53, 175, DateTimeKind.Local).AddTicks(973), "monetize real-time web services" },
                    { 176, 34, 60.004588843691130m, new DateTime(2017, 3, 25, 5, 8, 50, 488, DateTimeKind.Local).AddTicks(9927), "transform real-time architectures" },
                    { 177, 54, 12.9355679776348810m, new DateTime(2019, 9, 30, 16, 8, 5, 416, DateTimeKind.Local).AddTicks(4588), "envisioneer vertical infomediaries" },
                    { 178, 15, 60.904291789146040m, new DateTime(2018, 5, 13, 21, 39, 48, 707, DateTimeKind.Local).AddTicks(9410), "syndicate vertical markets" },
                    { 179, 23, 79.085418793146460m, new DateTime(2014, 8, 15, 8, 33, 40, 698, DateTimeKind.Local).AddTicks(1634), "morph 24/7 metrics" },
                    { 180, 39, 92.052580993980910m, new DateTime(2015, 3, 13, 0, 0, 32, 892, DateTimeKind.Local).AddTicks(4958), "visualize cutting-edge action-items" },
                    { 181, 47, 67.283301256140605m, new DateTime(2022, 12, 11, 12, 27, 24, 527, DateTimeKind.Local).AddTicks(4392), "benchmark viral architectures" },
                    { 182, 68, 40.636349648649955m, new DateTime(2014, 12, 12, 5, 49, 48, 567, DateTimeKind.Local).AddTicks(7474), "transition dot-com paradigms" },
                    { 183, 97, 73.263403813447260m, new DateTime(2021, 9, 8, 3, 16, 4, 277, DateTimeKind.Local).AddTicks(945), "evolve dot-com technologies" },
                    { 184, 76, 25.390596615554595m, new DateTime(2015, 6, 2, 15, 12, 25, 540, DateTimeKind.Local).AddTicks(8811), "reintermediate next-generation mindshare" },
                    { 185, 22, 59.641525791902610m, new DateTime(2017, 1, 19, 13, 0, 22, 134, DateTimeKind.Local).AddTicks(7777), "orchestrate ubiquitous content" },
                    { 186, 14, 8.7201811776018920m, new DateTime(2024, 3, 7, 15, 18, 48, 573, DateTimeKind.Local).AddTicks(7354), "seize collaborative networks" },
                    { 187, 30, 58.462225367846770m, new DateTime(2021, 5, 8, 1, 42, 39, 461, DateTimeKind.Local).AddTicks(1572), "generate visionary experiences" },
                    { 188, 66, 44.292292348224445m, new DateTime(2014, 8, 13, 15, 51, 45, 361, DateTimeKind.Local).AddTicks(8378), "strategize clicks-and-mortar paradigms" },
                    { 189, 94, 61.956902551729480m, new DateTime(2014, 6, 8, 2, 55, 10, 419, DateTimeKind.Local).AddTicks(116), "facilitate front-end partnerships" },
                    { 190, 86, 17.455099637751540m, new DateTime(2015, 3, 10, 0, 34, 14, 605, DateTimeKind.Local).AddTicks(1605), "architect value-added systems" },
                    { 191, 75, 39.519762490238125m, new DateTime(2023, 11, 22, 1, 22, 55, 924, DateTimeKind.Local).AddTicks(1878), "leverage extensible experiences" },
                    { 192, 86, 81.305172605506985m, new DateTime(2014, 4, 16, 19, 48, 11, 899, DateTimeKind.Local).AddTicks(8875), "maximize impactful e-business" },
                    { 193, 83, 55.074491513022620m, new DateTime(2017, 4, 9, 15, 1, 47, 240, DateTimeKind.Local).AddTicks(1971), "implement leading-edge architectures" },
                    { 194, 6, 43.489664687371280m, new DateTime(2021, 12, 11, 18, 17, 7, 988, DateTimeKind.Local).AddTicks(1773), "incentivize plug-and-play paradigms" },
                    { 195, 73, 24.335952742617825m, new DateTime(2016, 12, 24, 1, 9, 1, 658, DateTimeKind.Local).AddTicks(9045), "innovate 24/365 platforms" },
                    { 196, 96, 18.602332051856875m, new DateTime(2021, 10, 14, 17, 13, 14, 247, DateTimeKind.Local).AddTicks(2673), "engineer frictionless users" },
                    { 197, 2, 95.64542518816340m, new DateTime(2015, 6, 21, 18, 41, 28, 195, DateTimeKind.Local).AddTicks(5691), "optimize real-time metrics" },
                    { 198, 51, 26.207105120750290m, new DateTime(2017, 6, 2, 18, 6, 43, 479, DateTimeKind.Local).AddTicks(8280), "redefine wireless action-items" },
                    { 199, 26, 33.686329622193395m, new DateTime(2018, 7, 25, 21, 39, 23, 681, DateTimeKind.Local).AddTicks(4225), "whiteboard viral infomediaries" },
                    { 200, 99, 16.233636657576605m, new DateTime(2014, 5, 15, 3, 40, 34, 313, DateTimeKind.Local).AddTicks(7101), "evolve web-enabled convergence" },
                    { 201, 14, 93.092111811874520m, new DateTime(2018, 1, 16, 11, 6, 6, 527, DateTimeKind.Local).AddTicks(3331), "grow efficient content" },
                    { 202, 90, 8.3142997227112040m, new DateTime(2022, 9, 7, 7, 47, 7, 935, DateTimeKind.Local).AddTicks(6683), "iterate cross-media mindshare" },
                    { 203, 50, 60.941379177825220m, new DateTime(2017, 12, 12, 19, 22, 18, 302, DateTimeKind.Local).AddTicks(4707), "implement back-end channels" },
                    { 204, 52, 68.391144558078545m, new DateTime(2018, 6, 28, 1, 11, 50, 876, DateTimeKind.Local).AddTicks(6880), "deliver seamless technologies" },
                    { 205, 37, 54.686407692895915m, new DateTime(2020, 10, 28, 3, 13, 34, 608, DateTimeKind.Local).AddTicks(8132), "benchmark end-to-end systems" },
                    { 206, 7, 19.013280843883405m, new DateTime(2019, 7, 4, 2, 58, 46, 78, DateTimeKind.Local).AddTicks(3626), "mesh integrated networks" },
                    { 207, 57, 60.583763855697570m, new DateTime(2018, 3, 7, 19, 48, 38, 662, DateTimeKind.Local).AddTicks(6855), "e-enable end-to-end action-items" },
                    { 208, 9, 31.389302777675085m, new DateTime(2021, 3, 11, 21, 20, 36, 733, DateTimeKind.Local).AddTicks(1120), "transform distributed portals" },
                    { 209, 76, 78.75584583312020m, new DateTime(2023, 10, 1, 2, 16, 59, 583, DateTimeKind.Local).AddTicks(9986), "incentivize real-time vortals" },
                    { 210, 76, 65.468489516583135m, new DateTime(2014, 8, 18, 20, 4, 19, 186, DateTimeKind.Local).AddTicks(8984), "maximize cross-media web-readiness" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 211, 39, 18.765597117138460m, new DateTime(2021, 4, 19, 17, 3, 9, 87, DateTimeKind.Local).AddTicks(9913), "unleash collaborative interfaces" },
                    { 212, 18, 96.450307931498390m, new DateTime(2022, 3, 27, 22, 39, 30, 340, DateTimeKind.Local).AddTicks(7707), "cultivate customized blockchains" },
                    { 213, 22, 30.648406849825865m, new DateTime(2024, 3, 1, 19, 18, 54, 543, DateTimeKind.Local).AddTicks(1733), "visualize frictionless e-business" },
                    { 214, 27, 83.047035619422965m, new DateTime(2023, 10, 13, 4, 25, 49, 155, DateTimeKind.Local).AddTicks(8957), "visualize front-end web-readiness" },
                    { 215, 80, 39.496006073235695m, new DateTime(2021, 2, 9, 3, 1, 41, 194, DateTimeKind.Local).AddTicks(4234), "exploit distributed portals" },
                    { 216, 37, 35.130160897217010m, new DateTime(2016, 10, 21, 10, 16, 6, 855, DateTimeKind.Local).AddTicks(5838), "facilitate B2B experiences" },
                    { 217, 20, 14.572012909024640m, new DateTime(2019, 2, 6, 7, 13, 1, 951, DateTimeKind.Local).AddTicks(7251), "exploit ubiquitous partnerships" },
                    { 218, 99, 91.737536895613820m, new DateTime(2015, 10, 4, 0, 50, 59, 43, DateTimeKind.Local).AddTicks(7486), "expedite cross-media systems" },
                    { 219, 80, 41.792455594511995m, new DateTime(2023, 11, 10, 1, 42, 43, 792, DateTimeKind.Local).AddTicks(2924), "incentivize efficient relationships" },
                    { 220, 91, 58.006201606070570m, new DateTime(2021, 12, 3, 0, 58, 53, 365, DateTimeKind.Local).AddTicks(8047), "orchestrate sexy convergence" },
                    { 221, 39, 80.126676419655880m, new DateTime(2015, 10, 14, 10, 38, 47, 610, DateTimeKind.Local).AddTicks(7669), "engineer front-end web services" },
                    { 222, 4, 47.485748132590930m, new DateTime(2015, 3, 26, 17, 13, 14, 89, DateTimeKind.Local).AddTicks(92), "brand plug-and-play deliverables" },
                    { 223, 8, 73.493615741226995m, new DateTime(2022, 3, 18, 16, 48, 56, 119, DateTimeKind.Local).AddTicks(2668), "visualize dynamic ROI" },
                    { 224, 49, 77.690404371007770m, new DateTime(2020, 11, 7, 13, 49, 44, 811, DateTimeKind.Local).AddTicks(3670), "morph viral bandwidth" },
                    { 225, 16, 92.11257799043370m, new DateTime(2021, 11, 27, 12, 20, 47, 49, DateTimeKind.Local).AddTicks(6965), "synthesize intuitive infomediaries" },
                    { 226, 99, 29.792719917664830m, new DateTime(2018, 11, 1, 14, 15, 39, 384, DateTimeKind.Local).AddTicks(4037), "e-enable best-of-breed eyeballs" },
                    { 227, 71, 21.989154483897890m, new DateTime(2015, 9, 30, 7, 43, 39, 462, DateTimeKind.Local).AddTicks(3968), "harness cross-media eyeballs" },
                    { 228, 22, 7.1697422997921070m, new DateTime(2015, 11, 13, 15, 57, 41, 784, DateTimeKind.Local).AddTicks(736), "embrace efficient communities" },
                    { 229, 7, 15.523493766370435m, new DateTime(2015, 7, 11, 2, 20, 44, 372, DateTimeKind.Local).AddTicks(7358), "transition value-added ROI" },
                    { 230, 78, 73.251054164027565m, new DateTime(2021, 2, 1, 15, 57, 55, 264, DateTimeKind.Local).AddTicks(9485), "innovate sexy relationships" },
                    { 231, 23, 41.132450405128315m, new DateTime(2016, 11, 23, 1, 21, 10, 394, DateTimeKind.Local).AddTicks(874), "iterate proactive initiatives" },
                    { 232, 44, 78.707983020816220m, new DateTime(2016, 9, 15, 19, 18, 13, 569, DateTimeKind.Local).AddTicks(5274), "incubate scalable web-readiness" },
                    { 233, 24, 62.774008126644315m, new DateTime(2022, 9, 10, 12, 57, 16, 359, DateTimeKind.Local).AddTicks(9537), "incentivize proactive networks" },
                    { 234, 94, 44.049227333711335m, new DateTime(2015, 7, 3, 20, 57, 44, 518, DateTimeKind.Local).AddTicks(7734), "productize 24/7 content" },
                    { 235, 69, 90.455061878353865m, new DateTime(2024, 1, 27, 5, 1, 31, 292, DateTimeKind.Local).AddTicks(9353), "incentivize world-class schemas" },
                    { 236, 26, 96.634089356652815m, new DateTime(2017, 10, 1, 8, 48, 17, 608, DateTimeKind.Local).AddTicks(9486), "innovate granular systems" },
                    { 237, 66, 63.383318130283555m, new DateTime(2021, 1, 1, 12, 23, 19, 741, DateTimeKind.Local).AddTicks(685), "visualize integrated e-tailers" },
                    { 238, 51, 16.470383114569475m, new DateTime(2022, 6, 3, 10, 34, 50, 547, DateTimeKind.Local).AddTicks(4066), "transition rich niches" },
                    { 239, 85, 6.1836079505861995m, new DateTime(2021, 4, 12, 14, 7, 47, 831, DateTimeKind.Local).AddTicks(3302), "grow seamless users" },
                    { 240, 87, 52.139768324385925m, new DateTime(2017, 12, 30, 10, 57, 37, 637, DateTimeKind.Local).AddTicks(9855), "embrace next-generation technologies" },
                    { 241, 8, 91.679675555375760m, new DateTime(2019, 3, 17, 14, 7, 23, 46, DateTimeKind.Local).AddTicks(1668), "expedite strategic portals" },
                    { 242, 66, 82.532278356250840m, new DateTime(2017, 12, 23, 9, 45, 34, 751, DateTimeKind.Local).AddTicks(3540), "whiteboard dot-com convergence" },
                    { 243, 12, 92.153792052782830m, new DateTime(2023, 8, 23, 17, 44, 53, 809, DateTimeKind.Local).AddTicks(8110), "revolutionize strategic ROI" },
                    { 244, 94, 81.475757236943240m, new DateTime(2022, 6, 27, 23, 55, 36, 889, DateTimeKind.Local).AddTicks(7499), "synthesize customized infrastructures" },
                    { 245, 80, 28.603245999144280m, new DateTime(2022, 12, 21, 0, 51, 2, 764, DateTimeKind.Local).AddTicks(3894), "reintermediate best-of-breed web-readiness" },
                    { 246, 3, 74.572723070041795m, new DateTime(2016, 2, 16, 22, 34, 8, 932, DateTimeKind.Local).AddTicks(5935), "facilitate front-end content" },
                    { 247, 14, 28.192447690088210m, new DateTime(2022, 6, 5, 20, 1, 18, 40, DateTimeKind.Local).AddTicks(7493), "reintermediate robust technologies" },
                    { 248, 30, 49.75604559307410m, new DateTime(2014, 10, 25, 11, 10, 40, 38, DateTimeKind.Local).AddTicks(4912), "implement front-end channels" },
                    { 249, 36, 5.74194463458444535m, new DateTime(2021, 1, 2, 15, 15, 34, 19, DateTimeKind.Local).AddTicks(2693), "streamline interactive portals" },
                    { 250, 74, 16.299800818047590m, new DateTime(2019, 10, 26, 18, 33, 41, 314, DateTimeKind.Local).AddTicks(1317), "evolve global schemas" },
                    { 251, 80, 30.266232431417585m, new DateTime(2022, 6, 11, 0, 23, 33, 335, DateTimeKind.Local).AddTicks(4880), "cultivate sticky ROI" },
                    { 252, 5, 35.018673674604655m, new DateTime(2020, 9, 15, 4, 19, 44, 404, DateTimeKind.Local).AddTicks(3117), "incentivize enterprise markets" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 253, 5, 59.785095267258105m, new DateTime(2014, 12, 4, 16, 1, 2, 925, DateTimeKind.Local).AddTicks(5988), "expedite real-time web-readiness" },
                    { 254, 26, 94.970376387130680m, new DateTime(2017, 8, 2, 20, 43, 36, 979, DateTimeKind.Local).AddTicks(8184), "repurpose out-of-the-box schemas" },
                    { 255, 99, 45.486230987309620m, new DateTime(2016, 11, 30, 2, 24, 42, 643, DateTimeKind.Local).AddTicks(5468), "strategize 24/7 methodologies" },
                    { 256, 19, 15.320476963122710m, new DateTime(2015, 11, 25, 22, 12, 6, 405, DateTimeKind.Local).AddTicks(4832), "monetize next-generation e-commerce" },
                    { 257, 37, 62.262116291450815m, new DateTime(2020, 10, 24, 2, 52, 56, 832, DateTimeKind.Local).AddTicks(9028), "reinvent enterprise relationships" },
                    { 258, 64, 67.788537687194505m, new DateTime(2023, 8, 27, 12, 45, 32, 824, DateTimeKind.Local).AddTicks(4934), "reintermediate ubiquitous communities" },
                    { 259, 76, 19.307673072192180m, new DateTime(2023, 12, 8, 16, 26, 40, 8, DateTimeKind.Local).AddTicks(9672), "scale bleeding-edge web-readiness" },
                    { 260, 86, 48.454778550011365m, new DateTime(2015, 10, 4, 12, 24, 34, 927, DateTimeKind.Local).AddTicks(2356), "facilitate B2C networks" },
                    { 261, 23, 48.239289676065810m, new DateTime(2018, 10, 13, 19, 1, 0, 670, DateTimeKind.Local).AddTicks(2990), "morph transparent bandwidth" },
                    { 262, 93, 99.217927886294240m, new DateTime(2021, 2, 2, 19, 7, 7, 113, DateTimeKind.Local).AddTicks(9690), "recontextualize frictionless e-tailers" },
                    { 263, 45, 63.972111520382190m, new DateTime(2018, 10, 10, 4, 39, 31, 236, DateTimeKind.Local).AddTicks(3904), "disintermediate transparent synergies" },
                    { 264, 14, 31.933697146770155m, new DateTime(2018, 8, 26, 10, 35, 24, 58, DateTimeKind.Local).AddTicks(3958), "transform dynamic architectures" },
                    { 265, 29, 27.153857403478290m, new DateTime(2021, 8, 12, 12, 1, 50, 67, DateTimeKind.Local).AddTicks(6684), "architect end-to-end channels" },
                    { 266, 56, 55.719492589003020m, new DateTime(2015, 12, 31, 14, 46, 16, 272, DateTimeKind.Local).AddTicks(5402), "enable seamless initiatives" },
                    { 267, 2, 51.171341117623140m, new DateTime(2019, 11, 1, 5, 2, 54, 24, DateTimeKind.Local).AddTicks(5460), "seize innovative vortals" },
                    { 268, 45, 87.753862330323710m, new DateTime(2016, 4, 11, 11, 37, 47, 231, DateTimeKind.Local).AddTicks(9705), "target back-end e-tailers" },
                    { 269, 32, 21.763673293363830m, new DateTime(2018, 4, 11, 1, 37, 19, 723, DateTimeKind.Local).AddTicks(3803), "enable strategic e-tailers" },
                    { 270, 66, 6.5015706702946540m, new DateTime(2016, 1, 23, 9, 9, 5, 726, DateTimeKind.Local).AddTicks(4319), "enhance clicks-and-mortar platforms" },
                    { 271, 10, 30.980963509838535m, new DateTime(2022, 3, 7, 16, 3, 17, 123, DateTimeKind.Local).AddTicks(5252), "transition viral infrastructures" },
                    { 272, 59, 53.478301274037675m, new DateTime(2016, 3, 7, 1, 10, 39, 243, DateTimeKind.Local).AddTicks(9631), "grow web-enabled mindshare" },
                    { 273, 87, 43.239256981373055m, new DateTime(2020, 1, 31, 7, 50, 26, 120, DateTimeKind.Local).AddTicks(935), "streamline value-added portals" },
                    { 274, 62, 15.433624833994875m, new DateTime(2022, 3, 3, 20, 10, 57, 478, DateTimeKind.Local).AddTicks(3287), "extend viral blockchains" },
                    { 275, 9, 25.307258064681625m, new DateTime(2014, 4, 20, 20, 16, 3, 707, DateTimeKind.Local).AddTicks(1331), "benchmark wireless interfaces" },
                    { 276, 72, 16.121247357985570m, new DateTime(2023, 6, 1, 10, 25, 9, 840, DateTimeKind.Local).AddTicks(9790), "exploit next-generation bandwidth" },
                    { 277, 8, 85.724400448668330m, new DateTime(2018, 5, 25, 11, 46, 50, 857, DateTimeKind.Local).AddTicks(8970), "monetize interactive solutions" },
                    { 278, 11, 53.169179696627380m, new DateTime(2021, 7, 20, 22, 41, 29, 3, DateTimeKind.Local).AddTicks(4502), "whiteboard granular infomediaries" },
                    { 279, 96, 39.844476249292840m, new DateTime(2017, 9, 18, 14, 38, 47, 405, DateTimeKind.Local).AddTicks(6927), "utilize revolutionary methodologies" },
                    { 280, 14, 78.539084141007590m, new DateTime(2014, 7, 1, 8, 16, 42, 545, DateTimeKind.Local).AddTicks(6131), "productize world-class initiatives" },
                    { 281, 48, 75.183702135837765m, new DateTime(2019, 4, 30, 8, 16, 45, 61, DateTimeKind.Local).AddTicks(1650), "e-enable seamless markets" },
                    { 282, 71, 36.849963675343065m, new DateTime(2015, 7, 24, 21, 31, 33, 783, DateTimeKind.Local).AddTicks(4893), "redefine customized bandwidth" },
                    { 283, 20, 29.20011961929530m, new DateTime(2018, 11, 25, 20, 2, 26, 60, DateTimeKind.Local).AddTicks(3865), "incentivize scalable convergence" },
                    { 284, 66, 48.03904538302305m, new DateTime(2016, 7, 15, 1, 41, 58, 148, DateTimeKind.Local).AddTicks(8021), "productize bricks-and-clicks ROI" },
                    { 285, 46, 69.771824853804660m, new DateTime(2019, 8, 8, 18, 40, 44, 855, DateTimeKind.Local).AddTicks(6698), "seize extensible e-commerce" },
                    { 286, 73, 47.240688647265725m, new DateTime(2014, 6, 11, 17, 6, 37, 30, DateTimeKind.Local).AddTicks(5225), "incentivize bricks-and-clicks interfaces" },
                    { 287, 54, 58.504338217187780m, new DateTime(2019, 11, 25, 14, 8, 46, 202, DateTimeKind.Local).AddTicks(731), "embrace collaborative web-readiness" },
                    { 288, 56, 37.202694171049830m, new DateTime(2017, 11, 8, 8, 27, 15, 61, DateTimeKind.Local).AddTicks(4434), "reintermediate bleeding-edge niches" },
                    { 289, 53, 87.230772126396405m, new DateTime(2020, 11, 23, 22, 51, 26, 887, DateTimeKind.Local).AddTicks(7654), "grow holistic niches" },
                    { 290, 77, 84.065319745546160m, new DateTime(2019, 9, 27, 20, 28, 52, 503, DateTimeKind.Local).AddTicks(7667), "innovate real-time schemas" },
                    { 291, 61, 26.229168543763330m, new DateTime(2022, 4, 30, 6, 18, 37, 999, DateTimeKind.Local).AddTicks(2990), "synergize bricks-and-clicks partnerships" },
                    { 292, 62, 68.011748495438410m, new DateTime(2022, 8, 1, 22, 44, 2, 786, DateTimeKind.Local).AddTicks(7772), "utilize integrated infomediaries" },
                    { 293, 5, 34.64120731979775m, new DateTime(2014, 12, 29, 2, 52, 4, 709, DateTimeKind.Local).AddTicks(188), "incentivize leading-edge initiatives" },
                    { 294, 8, 49.496868409733165m, new DateTime(2019, 3, 19, 16, 25, 11, 112, DateTimeKind.Local).AddTicks(4223), "strategize B2C channels" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 295, 64, 89.896767318091405m, new DateTime(2016, 8, 18, 21, 41, 47, 634, DateTimeKind.Local).AddTicks(9200), "innovate 24/365 portals" },
                    { 296, 28, 41.136634149989270m, new DateTime(2017, 5, 14, 15, 54, 34, 583, DateTimeKind.Local).AddTicks(8413), "disintermediate e-business e-commerce" },
                    { 297, 12, 73.91159726769505m, new DateTime(2020, 7, 20, 5, 58, 45, 417, DateTimeKind.Local).AddTicks(5025), "leverage sticky experiences" },
                    { 298, 17, 11.5959481060330180m, new DateTime(2023, 2, 18, 23, 33, 31, 318, DateTimeKind.Local).AddTicks(4272), "exploit front-end bandwidth" },
                    { 299, 12, 93.770077146665870m, new DateTime(2022, 10, 12, 17, 0, 34, 904, DateTimeKind.Local).AddTicks(3627), "streamline best-of-breed functionalities" },
                    { 300, 97, 97.725455545935970m, new DateTime(2014, 11, 10, 9, 20, 18, 293, DateTimeKind.Local).AddTicks(8901), "seize plug-and-play relationships" }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 1, 1, "navigate", false },
                    { 2, 2, "bypass", true },
                    { 3, 3, "compress", true },
                    { 4, 4, "back up", false },
                    { 5, 5, "calculate", true },
                    { 6, 6, "reboot", false },
                    { 7, 7, "calculate", true },
                    { 8, 8, "calculate", true },
                    { 9, 9, "back up", true },
                    { 10, 10, "generate", true },
                    { 11, 11, "quantify", false },
                    { 12, 12, "generate", true },
                    { 13, 13, "hack", false },
                    { 14, 14, "calculate", false },
                    { 15, 15, "back up", false },
                    { 16, 16, "copy", true },
                    { 17, 17, "compress", false },
                    { 18, 18, "connect", false },
                    { 19, 19, "program", true },
                    { 20, 20, "connect", true },
                    { 21, 21, "index", true },
                    { 22, 22, "program", false },
                    { 23, 23, "calculate", true },
                    { 24, 24, "connect", true },
                    { 25, 25, "compress", false },
                    { 26, 26, "calculate", true },
                    { 27, 27, "index", true },
                    { 28, 28, "input", false },
                    { 29, 29, "connect", false },
                    { 30, 30, "quantify", false },
                    { 31, 31, "input", true },
                    { 32, 32, "quantify", true },
                    { 33, 33, "copy", true },
                    { 34, 34, "program", false },
                    { 35, 35, "input", true },
                    { 36, 36, "compress", true },
                    { 37, 37, "override", false },
                    { 38, 38, "program", true },
                    { 39, 39, "transmit", true },
                    { 40, 40, "override", true },
                    { 41, 41, "calculate", true },
                    { 42, 42, "generate", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 43, 43, "input", false },
                    { 44, 44, "program", true },
                    { 45, 45, "calculate", false },
                    { 46, 46, "calculate", false },
                    { 47, 47, "override", true },
                    { 48, 48, "index", false },
                    { 49, 49, "synthesize", true },
                    { 50, 50, "copy", false },
                    { 51, 51, "index", true },
                    { 52, 52, "input", false },
                    { 53, 53, "compress", true },
                    { 54, 54, "generate", true },
                    { 55, 55, "override", true },
                    { 56, 56, "hack", true },
                    { 57, 57, "synthesize", false },
                    { 58, 58, "calculate", false },
                    { 59, 59, "program", false },
                    { 60, 60, "copy", true },
                    { 61, 61, "input", false },
                    { 62, 62, "connect", true },
                    { 63, 63, "bypass", true },
                    { 64, 64, "copy", false },
                    { 65, 65, "compress", true },
                    { 66, 66, "index", true },
                    { 67, 67, "navigate", true },
                    { 68, 68, "parse", true },
                    { 69, 69, "generate", false },
                    { 70, 70, "hack", true },
                    { 71, 71, "copy", false },
                    { 72, 72, "calculate", false },
                    { 73, 73, "back up", false },
                    { 74, 74, "synthesize", true },
                    { 75, 75, "transmit", true },
                    { 76, 76, "reboot", false },
                    { 77, 77, "transmit", true },
                    { 78, 78, "parse", false },
                    { 79, 79, "input", true },
                    { 80, 80, "connect", true },
                    { 81, 81, "index", false },
                    { 82, 82, "copy", true },
                    { 83, 83, "back up", false },
                    { 84, 84, "calculate", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 85, 85, "override", true },
                    { 86, 86, "back up", false },
                    { 87, 87, "quantify", false },
                    { 88, 88, "compress", true },
                    { 89, 89, "synthesize", false },
                    { 90, 90, "bypass", true },
                    { 91, 91, "reboot", true },
                    { 92, 92, "parse", false },
                    { 93, 93, "hack", true },
                    { 94, 94, "calculate", false },
                    { 95, 95, "compress", true },
                    { 96, 96, "copy", false },
                    { 97, 97, "override", true },
                    { 98, 98, "program", true },
                    { 99, 99, "synthesize", false },
                    { 100, 100, "synthesize", true },
                    { 101, 101, "parse", true },
                    { 102, 102, "reboot", false },
                    { 103, 103, "back up", true },
                    { 104, 104, "transmit", true },
                    { 105, 105, "connect", false },
                    { 106, 106, "parse", true },
                    { 107, 107, "connect", false },
                    { 108, 108, "index", false },
                    { 109, 109, "reboot", false },
                    { 110, 110, "connect", true },
                    { 111, 111, "hack", false },
                    { 112, 112, "input", true },
                    { 113, 113, "compress", true },
                    { 114, 114, "compress", true },
                    { 115, 115, "calculate", false },
                    { 116, 116, "quantify", false },
                    { 117, 117, "transmit", true },
                    { 118, 118, "quantify", false },
                    { 119, 119, "input", true },
                    { 120, 120, "back up", true },
                    { 121, 121, "connect", true },
                    { 122, 122, "override", true },
                    { 123, 123, "compress", false },
                    { 124, 124, "reboot", true },
                    { 125, 125, "bypass", false },
                    { 126, 126, "index", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 127, 127, "calculate", true },
                    { 128, 128, "copy", false },
                    { 129, 129, "navigate", true },
                    { 130, 130, "program", true },
                    { 131, 131, "input", true },
                    { 132, 132, "quantify", true },
                    { 133, 133, "back up", false },
                    { 134, 134, "quantify", true },
                    { 135, 135, "hack", false },
                    { 136, 136, "quantify", true },
                    { 137, 137, "transmit", true },
                    { 138, 138, "transmit", true },
                    { 139, 139, "navigate", false },
                    { 140, 140, "program", true },
                    { 141, 141, "reboot", false },
                    { 142, 142, "back up", true },
                    { 143, 143, "bypass", false },
                    { 144, 144, "override", false },
                    { 145, 145, "input", false },
                    { 146, 146, "compress", true },
                    { 147, 147, "connect", false },
                    { 148, 148, "back up", false },
                    { 149, 149, "back up", false },
                    { 150, 150, "bypass", false },
                    { 151, 151, "parse", true },
                    { 152, 152, "navigate", true },
                    { 153, 153, "bypass", false },
                    { 154, 154, "bypass", false },
                    { 155, 155, "calculate", false },
                    { 156, 156, "generate", true },
                    { 157, 157, "back up", true },
                    { 158, 158, "compress", false },
                    { 159, 159, "calculate", true },
                    { 160, 160, "reboot", true },
                    { 161, 161, "bypass", false },
                    { 162, 162, "hack", true },
                    { 163, 163, "synthesize", false },
                    { 164, 164, "bypass", false },
                    { 165, 165, "calculate", false },
                    { 166, 166, "generate", false },
                    { 167, 167, "reboot", false },
                    { 168, 168, "calculate", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 169, 169, "reboot", false },
                    { 170, 170, "program", false },
                    { 171, 171, "index", true },
                    { 172, 172, "back up", true },
                    { 173, 173, "bypass", false },
                    { 174, 174, "back up", true },
                    { 175, 175, "hack", false },
                    { 176, 176, "reboot", false },
                    { 177, 177, "generate", true },
                    { 178, 178, "transmit", true },
                    { 179, 179, "quantify", true },
                    { 180, 180, "input", false },
                    { 181, 181, "program", false },
                    { 182, 182, "calculate", true },
                    { 183, 183, "transmit", false },
                    { 184, 184, "hack", true },
                    { 185, 185, "parse", false },
                    { 186, 186, "input", true },
                    { 187, 187, "transmit", false },
                    { 188, 188, "navigate", false },
                    { 189, 189, "override", false },
                    { 190, 190, "bypass", true },
                    { 191, 191, "synthesize", false },
                    { 192, 192, "reboot", true },
                    { 193, 193, "back up", true },
                    { 194, 194, "connect", true },
                    { 195, 195, "override", false },
                    { 196, 196, "parse", true },
                    { 197, 197, "generate", true },
                    { 198, 198, "override", false },
                    { 199, 199, "override", false },
                    { 200, 200, "copy", true },
                    { 201, 201, "copy", true },
                    { 202, 202, "transmit", true },
                    { 203, 203, "program", true },
                    { 204, 204, "compress", true },
                    { 205, 205, "hack", false },
                    { 206, 206, "generate", true },
                    { 207, 207, "program", true },
                    { 208, 208, "copy", true },
                    { 209, 209, "index", false },
                    { 210, 210, "generate", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 211, 211, "generate", true },
                    { 212, 212, "parse", true },
                    { 213, 213, "copy", false },
                    { 214, 214, "quantify", false },
                    { 215, 215, "compress", true },
                    { 216, 216, "bypass", false },
                    { 217, 217, "input", false },
                    { 218, 218, "calculate", true },
                    { 219, 219, "copy", false },
                    { 220, 220, "index", false },
                    { 221, 221, "index", true },
                    { 222, 222, "connect", true },
                    { 223, 223, "reboot", true },
                    { 224, 224, "quantify", false },
                    { 225, 225, "connect", true },
                    { 226, 226, "generate", false },
                    { 227, 227, "copy", true },
                    { 228, 228, "reboot", true },
                    { 229, 229, "index", false },
                    { 230, 230, "parse", true },
                    { 231, 231, "calculate", false },
                    { 232, 232, "input", false },
                    { 233, 233, "index", true },
                    { 234, 234, "bypass", false },
                    { 235, 235, "transmit", true },
                    { 236, 236, "quantify", true },
                    { 237, 237, "input", true },
                    { 238, 238, "synthesize", true },
                    { 239, 239, "override", true },
                    { 240, 240, "transmit", false },
                    { 241, 241, "bypass", true },
                    { 242, 242, "bypass", false },
                    { 243, 243, "hack", false },
                    { 244, 244, "copy", false },
                    { 245, 245, "back up", true },
                    { 246, 246, "input", true },
                    { 247, 247, "bypass", true },
                    { 248, 248, "back up", false },
                    { 249, 249, "calculate", true },
                    { 250, 250, "reboot", false },
                    { 251, 251, "back up", false },
                    { 252, 252, "navigate", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 253, 253, "quantify", false },
                    { 254, 254, "back up", true },
                    { 255, 255, "override", true },
                    { 256, 256, "index", false },
                    { 257, 257, "quantify", true },
                    { 258, 258, "override", true },
                    { 259, 259, "compress", false },
                    { 260, 260, "generate", false },
                    { 261, 261, "quantify", true },
                    { 262, 262, "bypass", true },
                    { 263, 263, "transmit", true },
                    { 264, 264, "bypass", false },
                    { 265, 265, "back up", true },
                    { 266, 266, "bypass", true },
                    { 267, 267, "compress", false },
                    { 268, 268, "hack", true },
                    { 269, 269, "transmit", false },
                    { 270, 270, "transmit", true },
                    { 271, 271, "navigate", true },
                    { 272, 272, "back up", true },
                    { 273, 273, "copy", true },
                    { 274, 274, "connect", false },
                    { 275, 275, "compress", true },
                    { 276, 276, "copy", true },
                    { 277, 277, "transmit", false },
                    { 278, 278, "input", true },
                    { 279, 279, "override", false },
                    { 280, 280, "back up", false },
                    { 281, 281, "synthesize", true },
                    { 282, 282, "calculate", true },
                    { 283, 283, "synthesize", false },
                    { 284, 284, "calculate", false },
                    { 285, 285, "quantify", false },
                    { 286, 286, "synthesize", false },
                    { 287, 287, "reboot", true },
                    { 288, 288, "hack", true },
                    { 289, 289, "transmit", true },
                    { 290, 290, "hack", true },
                    { 291, 291, "calculate", false },
                    { 292, 292, "hack", false },
                    { 293, 293, "bypass", true },
                    { 294, 294, "hack", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 295, 295, "transmit", false },
                    { 296, 296, "program", true },
                    { 297, 297, "hack", true },
                    { 298, 298, "index", false },
                    { 299, 299, "reboot", false },
                    { 300, 300, "navigate", true }
                });

            migrationBuilder.CreateIndex(
                name: "IX_ArtistCover_CoversCoverId",
                table: "ArtistCover",
                column: "CoversCoverId");

            migrationBuilder.CreateIndex(
                name: "IX_ArtistCover_ArtistsArtistId",
                table: "ArtistCover",
                column: "ArtistsArtistId");

            migrationBuilder.CreateIndex(
                name: "IX_Books_AuthorId",
                table: "Books",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_Covers_BookId",
                table: "Covers",
                column: "BookId",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ArtistCover");

            migrationBuilder.DropTable(
                name: "Artists");

            migrationBuilder.DropTable(
                name: "Covers");

            migrationBuilder.DropTable(
                name: "Books");

            migrationBuilder.DropTable(
                name: "Authors");
        }
    }
}
