using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace PublisherData.Migrations
{
    public partial class InitialMigrationAndSeed : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Artists",
                columns: table => new
                {
                    ArtistId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Artists", x => x.ArtistId);
                });

            migrationBuilder.CreateTable(
                name: "Authors",
                columns: table => new
                {
                    AuthorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastUpdated = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Authors", x => x.AuthorId);
                });

            migrationBuilder.CreateTable(
                name: "Books",
                columns: table => new
                {
                    BookId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PublishDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    BasePrice = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    AuthorId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Books", x => x.BookId);
                    table.ForeignKey(
                        name: "FK_Books_Authors_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Authors",
                        principalColumn: "AuthorId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Covers",
                columns: table => new
                {
                    CoverId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DesignIdeas = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DigitalOnly = table.Column<bool>(type: "bit", nullable: false),
                    BookId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Covers", x => x.CoverId);
                    table.ForeignKey(
                        name: "FK_Covers_Books_BookId",
                        column: x => x.BookId,
                        principalTable: "Books",
                        principalColumn: "BookId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ArtistCover",
                columns: table => new
                {
                    ArtistsArtistId = table.Column<int>(type: "int", nullable: false),
                    CoversCoverId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ArtistCover", x => new { x.ArtistsArtistId, x.CoversCoverId });
                    table.ForeignKey(
                        name: "FK_ArtistCover_Artists_ArtistsArtistId",
                        column: x => x.ArtistsArtistId,
                        principalTable: "Artists",
                        principalColumn: "ArtistId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ArtistCover_Covers_CoversCoverId",
                        column: x => x.CoversCoverId,
                        principalTable: "Covers",
                        principalColumn: "CoverId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 1, "Ana", "Konopelski" },
                    { 2, "Carleton", "Howell" },
                    { 3, "Maude", "Bradtke" },
                    { 4, "Krystel", "Johnston" },
                    { 5, "Micaela", "Anderson" },
                    { 6, "Myrl", "Schmeler" },
                    { 7, "Maribel", "Greenfelder" },
                    { 8, "Verlie", "Runolfsdottir" },
                    { 9, "Otilia", "Haley" },
                    { 10, "Vernie", "Streich" },
                    { 11, "Paolo", "Hodkiewicz" },
                    { 12, "Mariam", "Ruecker" },
                    { 13, "Milton", "Walsh" },
                    { 14, "Isaiah", "Johns" },
                    { 15, "Ryan", "Lakin" },
                    { 16, "Darrel", "Pollich" },
                    { 17, "Mertie", "Paucek" },
                    { 18, "Darrin", "Bogan" },
                    { 19, "Walton", "Tillman" },
                    { 20, "Darwin", "Gulgowski" },
                    { 21, "Frances", "Muller" },
                    { 22, "Dayton", "Nolan" },
                    { 23, "Mohamed", "Koelpin" },
                    { 24, "Gerda", "Fisher" },
                    { 25, "Reinhold", "Ernser" },
                    { 26, "Phoebe", "Powlowski" },
                    { 27, "Ali", "Hessel" },
                    { 28, "Audra", "Moore" },
                    { 29, "Blanca", "Ernser" },
                    { 30, "Jensen", "Gibson" },
                    { 31, "Zane", "Kohler" },
                    { 32, "Ellis", "Orn" },
                    { 33, "Russell", "Weissnat" },
                    { 34, "Gerry", "Zieme" },
                    { 35, "Emmy", "Hermiston" },
                    { 36, "Hermann", "Williamson" },
                    { 37, "Charlie", "Hermann" },
                    { 38, "Jayne", "VonRueden" },
                    { 39, "Desiree", "Quitzon" },
                    { 40, "Brennan", "Koelpin" },
                    { 41, "Malvina", "Funk" },
                    { 42, "Daniella", "Rowe" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 43, "Levi", "Stroman" },
                    { 44, "Marshall", "Ruecker" },
                    { 45, "Kendrick", "Boehm" },
                    { 46, "Patience", "Harris" },
                    { 47, "Emiliano", "Kuhn" },
                    { 48, "Shayne", "Hand" },
                    { 49, "Sibyl", "Graham" },
                    { 50, "Opal", "Heller" },
                    { 51, "Adrain", "Schaefer" },
                    { 52, "Laurianne", "Schimmel" },
                    { 53, "Rodolfo", "O'Reilly" },
                    { 54, "Ozella", "Baumbach" },
                    { 55, "Halie", "Roob" },
                    { 56, "Elza", "Witting" },
                    { 57, "Deshaun", "Zboncak" },
                    { 58, "Meaghan", "Hartmann" },
                    { 59, "Ian", "Auer" },
                    { 60, "Estell", "Watsica" },
                    { 61, "Kattie", "Ratke" },
                    { 62, "Kirstin", "Kuhic" },
                    { 63, "Jennie", "Lind" },
                    { 64, "Howard", "Powlowski" },
                    { 65, "Cade", "Russel" },
                    { 66, "Matteo", "Stroman" },
                    { 67, "Tomasa", "Strosin" },
                    { 68, "Kraig", "Daniel" },
                    { 69, "Rachel", "Metz" },
                    { 70, "Braeden", "Deckow" },
                    { 71, "June", "Macejkovic" },
                    { 72, "Kianna", "Leffler" },
                    { 73, "Georgette", "Hermiston" },
                    { 74, "Baron", "Jenkins" },
                    { 75, "Jefferey", "Keeling" },
                    { 76, "Jacinto", "O'Connell" },
                    { 77, "Jocelyn", "Gottlieb" },
                    { 78, "Blaise", "Durgan" },
                    { 79, "Cathrine", "Bartell" },
                    { 80, "Orland", "Stiedemann" },
                    { 81, "Adolph", "Conroy" },
                    { 82, "Allen", "Greenholt" },
                    { 83, "Cullen", "Kilback" },
                    { 84, "Julio", "Reinger" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 85, "Ole", "Beer" },
                    { 86, "Barney", "Willms" },
                    { 87, "Mylene", "Satterfield" },
                    { 88, "Nona", "White" },
                    { 89, "Rachelle", "Weber" },
                    { 90, "Kaitlyn", "Stoltenberg" },
                    { 91, "Anya", "Gislason" },
                    { 92, "Wilford", "Koepp" },
                    { 93, "Gaetano", "Abernathy" },
                    { 94, "Coleman", "Lubowitz" },
                    { 95, "Mateo", "Dare" },
                    { 96, "Mortimer", "Johnson" },
                    { 97, "Guadalupe", "Treutel" },
                    { 98, "Erica", "Blanda" },
                    { 99, "Alicia", "Boyle" },
                    { 100, "Joseph", "Buckridge" },
                    { 101, "Americo", "Nader" },
                    { 102, "Nicholaus", "Satterfield" },
                    { 103, "Eda", "Murazik" },
                    { 104, "Ebony", "Strosin" },
                    { 105, "Edmond", "Becker" },
                    { 106, "Rylan", "Crona" },
                    { 107, "Lenore", "Christiansen" },
                    { 108, "Peggie", "Price" },
                    { 109, "Hardy", "Herman" },
                    { 110, "Jean", "Goldner" },
                    { 111, "Kim", "Schultz" },
                    { 112, "Bertha", "Schoen" },
                    { 113, "Christa", "Blanda" },
                    { 114, "Mia", "Mante" },
                    { 115, "Cordia", "Bradtke" },
                    { 116, "Earnest", "Reynolds" },
                    { 117, "Skyla", "Quitzon" },
                    { 118, "Asha", "Emard" },
                    { 119, "Neoma", "Gusikowski" },
                    { 120, "Jacinto", "Ebert" },
                    { 121, "Linwood", "Towne" },
                    { 122, "Roberta", "Kutch" },
                    { 123, "Enrico", "Kuhic" },
                    { 124, "Jayce", "Berge" },
                    { 125, "Francesca", "Jerde" },
                    { 126, "Elsa", "Mueller" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 127, "Ethan", "Feeney" },
                    { 128, "Griffin", "Morissette" },
                    { 129, "Eduardo", "Crist" },
                    { 130, "Andres", "King" },
                    { 131, "Miguel", "Carter" },
                    { 132, "Irma", "Runte" },
                    { 133, "Lavinia", "Weber" },
                    { 134, "Cole", "Anderson" },
                    { 135, "Jake", "Botsford" },
                    { 136, "Ollie", "Nikolaus" },
                    { 137, "Toney", "McClure" },
                    { 138, "Ella", "Nader" },
                    { 139, "Clementine", "Klein" },
                    { 140, "Ardella", "Huels" },
                    { 141, "Jensen", "Ferry" },
                    { 142, "Lilly", "Johnston" },
                    { 143, "Watson", "Kreiger" },
                    { 144, "Ladarius", "Turner" },
                    { 145, "Mikayla", "Cormier" },
                    { 146, "Lowell", "Botsford" },
                    { 147, "Brionna", "Quitzon" },
                    { 148, "Sherman", "Brakus" },
                    { 149, "Weldon", "Harvey" },
                    { 150, "Adela", "Stokes" },
                    { 151, "Keon", "Jerde" },
                    { 152, "Gideon", "Bode" },
                    { 153, "Shaniya", "Prosacco" },
                    { 154, "Helen", "Becker" },
                    { 155, "Robert", "Bogan" },
                    { 156, "Graciela", "Huels" },
                    { 157, "Francesca", "Botsford" },
                    { 158, "Elmore", "Lakin" },
                    { 159, "Zack", "Bruen" },
                    { 160, "Thurman", "Paucek" },
                    { 161, "Candace", "Boyer" },
                    { 162, "Enoch", "Hamill" },
                    { 163, "Ricardo", "Mertz" },
                    { 164, "Jackeline", "Maggio" },
                    { 165, "Quinn", "Heidenreich" },
                    { 166, "Emma", "Metz" },
                    { 167, "Casimir", "Torp" },
                    { 168, "Gussie", "Boyer" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 169, "Fausto", "Halvorson" },
                    { 170, "Vito", "Botsford" },
                    { 171, "Laurel", "Denesik" },
                    { 172, "Damian", "Hansen" },
                    { 173, "Selena", "Reilly" },
                    { 174, "Felicia", "Mayert" },
                    { 175, "Eloisa", "Stark" },
                    { 176, "Vivianne", "Luettgen" },
                    { 177, "Loraine", "Dibbert" },
                    { 178, "Imelda", "Rutherford" },
                    { 179, "Rowan", "Satterfield" },
                    { 180, "Cory", "Fay" },
                    { 181, "Carlotta", "McKenzie" },
                    { 182, "Krystal", "Gerhold" },
                    { 183, "Wilfred", "Haag" },
                    { 184, "Lowell", "Torp" },
                    { 185, "Sid", "Waters" },
                    { 186, "Kenya", "Morar" },
                    { 187, "Annetta", "Conn" },
                    { 188, "Otilia", "Kuhic" },
                    { 189, "Antonina", "Collins" },
                    { 190, "Vivienne", "Ziemann" },
                    { 191, "Desmond", "Nitzsche" },
                    { 192, "Garnet", "Cormier" },
                    { 193, "Paolo", "O'Hara" },
                    { 194, "Deshawn", "Zieme" },
                    { 195, "Markus", "Keebler" },
                    { 196, "Nikki", "Farrell" },
                    { 197, "Terrence", "Zieme" },
                    { 198, "Hallie", "Deckow" },
                    { 199, "Milan", "Emard" },
                    { 200, "Garett", "Stoltenberg" },
                    { 201, "Lucinda", "Schneider" },
                    { 202, "Rosemarie", "Hoppe" },
                    { 203, "Bert", "Konopelski" },
                    { 204, "Jonathan", "Kertzmann" },
                    { 205, "Tyreek", "Rodriguez" },
                    { 206, "Kurtis", "Senger" },
                    { 207, "Cory", "Dickinson" },
                    { 208, "Marcia", "Walker" },
                    { 209, "Colby", "Kohler" },
                    { 210, "Alexanne", "Ernser" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 211, "Garnet", "Stark" },
                    { 212, "Juliet", "Batz" },
                    { 213, "Kitty", "Von" },
                    { 214, "Alysa", "Cole" },
                    { 215, "Berniece", "Fritsch" },
                    { 216, "Baron", "Cartwright" },
                    { 217, "Norma", "Flatley" },
                    { 218, "Pierce", "Kessler" },
                    { 219, "Jamie", "Lueilwitz" },
                    { 220, "Constance", "Frami" },
                    { 221, "Jannie", "Greenholt" },
                    { 222, "Maegan", "Pagac" },
                    { 223, "Nigel", "Fisher" },
                    { 224, "Darren", "Boyle" },
                    { 225, "Lucile", "Rice" },
                    { 226, "Jefferey", "Gislason" },
                    { 227, "Jarrell", "Tillman" },
                    { 228, "Gabrielle", "Schmeler" },
                    { 229, "Jovan", "Reinger" },
                    { 230, "Sherwood", "Kuhn" },
                    { 231, "Taylor", "Hagenes" },
                    { 232, "Carole", "Hand" },
                    { 233, "Elliott", "Langworth" },
                    { 234, "Maxine", "Kunze" },
                    { 235, "Javier", "Christiansen" },
                    { 236, "Cassandre", "Quigley" },
                    { 237, "Nikko", "Windler" },
                    { 238, "Karianne", "Huel" },
                    { 239, "Della", "Ondricka" },
                    { 240, "Darby", "Senger" },
                    { 241, "Eleanore", "Kreiger" },
                    { 242, "Dwight", "Wisoky" },
                    { 243, "Wilber", "Parisian" },
                    { 244, "Deron", "Wolff" },
                    { 245, "Mustafa", "Harris" },
                    { 246, "Lucy", "Robel" },
                    { 247, "Ward", "Heller" },
                    { 248, "Russ", "Nader" },
                    { 249, "Reese", "Kemmer" },
                    { 250, "Chloe", "Conroy" },
                    { 251, "Abby", "Hegmann" },
                    { 252, "Lamar", "Leffler" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 253, "Elda", "Daugherty" },
                    { 254, "Berry", "Powlowski" },
                    { 255, "Bryce", "MacGyver" },
                    { 256, "Korbin", "Schaefer" },
                    { 257, "Domenico", "Will" },
                    { 258, "Ryan", "Durgan" },
                    { 259, "Aletha", "Gislason" },
                    { 260, "Jimmie", "Ondricka" },
                    { 261, "Raven", "Reynolds" },
                    { 262, "Jaime", "Quigley" },
                    { 263, "Ephraim", "Kiehn" },
                    { 264, "Harold", "O'Connell" },
                    { 265, "Esteban", "Padberg" },
                    { 266, "Jazmyne", "Mueller" },
                    { 267, "Victor", "Corkery" },
                    { 268, "Elda", "Walter" },
                    { 269, "Ollie", "Donnelly" },
                    { 270, "Eloy", "Ledner" },
                    { 271, "Felipa", "Sawayn" },
                    { 272, "Roma", "Kling" },
                    { 273, "Rickie", "Graham" },
                    { 274, "Ransom", "Rath" },
                    { 275, "Mateo", "Sawayn" },
                    { 276, "Paxton", "Marquardt" },
                    { 277, "Flavie", "Gaylord" },
                    { 278, "Camden", "Veum" },
                    { 279, "Keon", "Tremblay" },
                    { 280, "Richard", "Rath" },
                    { 281, "Mike", "Swift" },
                    { 282, "Rowan", "Bernhard" },
                    { 283, "Emile", "Langosh" },
                    { 284, "Jalen", "Towne" },
                    { 285, "Emilia", "Mayer" },
                    { 286, "Naomi", "Windler" },
                    { 287, "Norene", "Koss" },
                    { 288, "Twila", "McDermott" },
                    { 289, "Demond", "Doyle" },
                    { 290, "Marty", "Mitchell" },
                    { 291, "Arjun", "Hagenes" },
                    { 292, "Devon", "Dach" },
                    { 293, "Lizeth", "Gusikowski" },
                    { 294, "Nicolas", "O'Connell" }
                });

            migrationBuilder.InsertData(
                table: "Artists",
                columns: new[] { "ArtistId", "FirstName", "LastName" },
                values: new object[,]
                {
                    { 295, "Freida", "Koch" },
                    { 296, "Johnathon", "Lynch" },
                    { 297, "Otilia", "Mraz" },
                    { 298, "Ashly", "Medhurst" },
                    { 299, "Katelin", "Berge" },
                    { 300, "Amani", "Veum" }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 1, "Enid", "Cruickshank", new DateTime(2023, 9, 14, 12, 16, 37, 888, DateTimeKind.Local).AddTicks(7874) },
                    { 2, "Germaine", "Lynch", new DateTime(2017, 10, 16, 23, 29, 45, 639, DateTimeKind.Local).AddTicks(6486) },
                    { 3, "Ahmad", "Treutel", new DateTime(2022, 10, 27, 14, 56, 38, 431, DateTimeKind.Local).AddTicks(3559) },
                    { 4, "Fausto", "Abbott", new DateTime(2023, 9, 18, 18, 36, 25, 299, DateTimeKind.Local).AddTicks(9330) },
                    { 5, "Freeman", "Kiehn", new DateTime(2017, 5, 25, 4, 35, 56, 82, DateTimeKind.Local).AddTicks(9495) },
                    { 6, "Cristobal", "Stroman", new DateTime(2018, 5, 12, 14, 5, 48, 99, DateTimeKind.Local).AddTicks(3910) },
                    { 7, "Stacey", "Rohan", new DateTime(2022, 3, 7, 20, 56, 15, 971, DateTimeKind.Local).AddTicks(4464) },
                    { 8, "Esther", "Hartmann", new DateTime(2017, 6, 17, 13, 19, 12, 944, DateTimeKind.Local).AddTicks(4602) },
                    { 9, "Hilbert", "Considine", new DateTime(2024, 2, 22, 1, 11, 21, 636, DateTimeKind.Local).AddTicks(7526) },
                    { 10, "Sally", "Krajcik", new DateTime(2018, 10, 18, 11, 58, 31, 79, DateTimeKind.Local).AddTicks(9719) },
                    { 11, "Judd", "Treutel", new DateTime(2019, 7, 5, 7, 26, 4, 845, DateTimeKind.Local).AddTicks(9495) },
                    { 12, "Alva", "Heidenreich", new DateTime(2021, 10, 13, 11, 33, 51, 477, DateTimeKind.Local).AddTicks(9581) },
                    { 13, "Isaias", "Murazik", new DateTime(2022, 11, 4, 8, 40, 45, 851, DateTimeKind.Local).AddTicks(2716) },
                    { 14, "Martina", "Bogan", new DateTime(2021, 6, 15, 17, 36, 33, 433, DateTimeKind.Local).AddTicks(2986) },
                    { 15, "Rey", "Waelchi", new DateTime(2021, 4, 20, 18, 49, 24, 210, DateTimeKind.Local).AddTicks(3999) },
                    { 16, "Lyric", "Tillman", new DateTime(2023, 3, 1, 11, 2, 27, 700, DateTimeKind.Local).AddTicks(476) },
                    { 17, "Nora", "Brekke", new DateTime(2017, 4, 1, 19, 2, 54, 75, DateTimeKind.Local).AddTicks(7150) },
                    { 18, "German", "Nitzsche", new DateTime(2023, 2, 18, 1, 50, 48, 458, DateTimeKind.Local).AddTicks(4739) },
                    { 19, "Elvis", "Walker", new DateTime(2022, 7, 6, 14, 26, 10, 686, DateTimeKind.Local).AddTicks(5158) },
                    { 20, "Yasmin", "Wintheiser", new DateTime(2020, 7, 14, 15, 54, 59, 628, DateTimeKind.Local).AddTicks(7388) },
                    { 21, "Ludwig", "Crooks", new DateTime(2021, 9, 13, 4, 39, 0, 550, DateTimeKind.Local).AddTicks(6782) },
                    { 22, "Gertrude", "Renner", new DateTime(2023, 10, 30, 15, 11, 37, 288, DateTimeKind.Local).AddTicks(192) },
                    { 23, "Carmine", "Schroeder", new DateTime(2021, 5, 18, 19, 58, 43, 83, DateTimeKind.Local).AddTicks(2308) },
                    { 24, "Luisa", "Nikolaus", new DateTime(2019, 1, 29, 13, 37, 54, 910, DateTimeKind.Local).AddTicks(3653) },
                    { 25, "Immanuel", "Romaguera", new DateTime(2019, 5, 8, 11, 41, 58, 821, DateTimeKind.Local).AddTicks(4792) },
                    { 26, "Rey", "Wolf", new DateTime(2019, 2, 27, 9, 10, 29, 8, DateTimeKind.Local).AddTicks(9946) },
                    { 27, "Catalina", "Conn", new DateTime(2022, 2, 23, 3, 1, 20, 5, DateTimeKind.Local).AddTicks(4357) },
                    { 28, "Aliya", "Borer", new DateTime(2019, 2, 14, 8, 10, 10, 908, DateTimeKind.Local).AddTicks(7541) },
                    { 29, "Krystina", "Bernhard", new DateTime(2020, 11, 30, 4, 2, 19, 4, DateTimeKind.Local).AddTicks(7638) },
                    { 30, "Helen", "Ferry", new DateTime(2017, 3, 1, 19, 45, 42, 737, DateTimeKind.Local).AddTicks(9235) },
                    { 31, "Johathan", "Schmeler", new DateTime(2016, 1, 12, 15, 35, 25, 45, DateTimeKind.Local).AddTicks(3018) },
                    { 32, "Karli", "McLaughlin", new DateTime(2020, 9, 30, 23, 14, 0, 875, DateTimeKind.Local).AddTicks(6185) },
                    { 33, "Cordie", "O'Conner", new DateTime(2023, 11, 13, 7, 14, 48, 846, DateTimeKind.Local).AddTicks(4064) },
                    { 34, "Teresa", "Kovacek", new DateTime(2018, 3, 4, 21, 27, 44, 674, DateTimeKind.Local).AddTicks(7515) },
                    { 35, "Aileen", "Thiel", new DateTime(2018, 7, 21, 17, 14, 36, 88, DateTimeKind.Local).AddTicks(94) },
                    { 36, "Maximus", "Ledner", new DateTime(2021, 12, 7, 7, 59, 21, 627, DateTimeKind.Local).AddTicks(6765) }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 37, "Dax", "Schmidt", new DateTime(2018, 4, 27, 11, 25, 1, 863, DateTimeKind.Local).AddTicks(7063) },
                    { 38, "Devyn", "Ebert", new DateTime(2022, 2, 19, 9, 39, 51, 956, DateTimeKind.Local).AddTicks(3649) },
                    { 39, "Asha", "Wiza", new DateTime(2022, 8, 31, 15, 54, 52, 181, DateTimeKind.Local).AddTicks(4502) },
                    { 40, "Jaleel", "Jacobi", new DateTime(2020, 10, 8, 10, 31, 45, 552, DateTimeKind.Local).AddTicks(3672) },
                    { 41, "Meghan", "Haag", new DateTime(2017, 11, 9, 13, 22, 50, 190, DateTimeKind.Local).AddTicks(9934) },
                    { 42, "Izabella", "Corwin", new DateTime(2018, 11, 28, 2, 41, 33, 964, DateTimeKind.Local).AddTicks(2752) },
                    { 43, "Brielle", "Heller", new DateTime(2019, 2, 13, 9, 9, 7, 920, DateTimeKind.Local).AddTicks(3018) },
                    { 44, "Erick", "Bins", new DateTime(2016, 12, 26, 10, 16, 17, 700, DateTimeKind.Local).AddTicks(6486) },
                    { 45, "Anna", "MacGyver", new DateTime(2017, 7, 10, 4, 12, 35, 197, DateTimeKind.Local).AddTicks(6121) },
                    { 46, "Jett", "Orn", new DateTime(2021, 4, 25, 9, 30, 13, 341, DateTimeKind.Local).AddTicks(899) },
                    { 47, "Samanta", "Abbott", new DateTime(2020, 8, 10, 10, 8, 38, 350, DateTimeKind.Local).AddTicks(6129) },
                    { 48, "Deion", "Legros", new DateTime(2017, 2, 18, 6, 27, 33, 267, DateTimeKind.Local).AddTicks(4476) },
                    { 49, "Naomi", "Green", new DateTime(2020, 9, 12, 5, 4, 51, 361, DateTimeKind.Local).AddTicks(2046) },
                    { 50, "Princess", "Kub", new DateTime(2022, 3, 3, 18, 51, 52, 662, DateTimeKind.Local).AddTicks(5791) },
                    { 51, "Susie", "Daniel", new DateTime(2017, 8, 21, 0, 15, 1, 825, DateTimeKind.Local).AddTicks(8326) },
                    { 52, "Stephany", "Stiedemann", new DateTime(2022, 10, 8, 14, 47, 19, 702, DateTimeKind.Local).AddTicks(6898) },
                    { 53, "Gordon", "Lueilwitz", new DateTime(2020, 4, 18, 19, 53, 47, 533, DateTimeKind.Local).AddTicks(1043) },
                    { 54, "Nia", "Rice", new DateTime(2022, 10, 13, 3, 49, 56, 244, DateTimeKind.Local).AddTicks(3653) },
                    { 55, "Carolina", "Little", new DateTime(2023, 11, 13, 5, 26, 28, 834, DateTimeKind.Local).AddTicks(4246) },
                    { 56, "Evans", "Parisian", new DateTime(2018, 12, 16, 6, 22, 59, 879, DateTimeKind.Local).AddTicks(867) },
                    { 57, "Deven", "Witting", new DateTime(2023, 4, 30, 7, 34, 42, 13, DateTimeKind.Local).AddTicks(9885) },
                    { 58, "Lavon", "Wilkinson", new DateTime(2019, 10, 4, 6, 58, 3, 160, DateTimeKind.Local).AddTicks(9693) },
                    { 59, "Bernadine", "Smitham", new DateTime(2021, 7, 2, 7, 42, 26, 652, DateTimeKind.Local).AddTicks(7310) },
                    { 60, "Tyreek", "Pfannerstill", new DateTime(2018, 11, 20, 23, 35, 0, 594, DateTimeKind.Local).AddTicks(7214) },
                    { 61, "Chaya", "Brown", new DateTime(2018, 9, 5, 4, 31, 28, 624, DateTimeKind.Local).AddTicks(7174) },
                    { 62, "Chelsey", "Lakin", new DateTime(2023, 10, 7, 22, 24, 21, 517, DateTimeKind.Local).AddTicks(52) },
                    { 63, "Roger", "Rice", new DateTime(2020, 12, 20, 13, 15, 0, 360, DateTimeKind.Local).AddTicks(4510) },
                    { 64, "Faye", "Goyette", new DateTime(2022, 4, 10, 12, 30, 41, 69, DateTimeKind.Local).AddTicks(6753) },
                    { 65, "Garrick", "Mueller", new DateTime(2018, 4, 8, 2, 58, 1, 852, DateTimeKind.Local).AddTicks(6106) },
                    { 66, "Christiana", "Bernier", new DateTime(2016, 8, 9, 11, 44, 1, 485, DateTimeKind.Local).AddTicks(6126) },
                    { 67, "Ashleigh", "Hackett", new DateTime(2016, 7, 24, 8, 57, 12, 338, DateTimeKind.Local).AddTicks(9243) },
                    { 68, "Ed", "Lesch", new DateTime(2022, 12, 27, 12, 58, 15, 261, DateTimeKind.Local).AddTicks(6765) },
                    { 69, "Savanna", "Smitham", new DateTime(2018, 11, 1, 18, 22, 34, 485, DateTimeKind.Local).AddTicks(473) },
                    { 70, "Clemens", "Frami", new DateTime(2019, 10, 18, 19, 21, 15, 56, DateTimeKind.Local).AddTicks(3056) },
                    { 71, "Jaren", "Hand", new DateTime(2019, 11, 5, 11, 39, 19, 316, DateTimeKind.Local).AddTicks(1635) },
                    { 72, "Gus", "Kris", new DateTime(2024, 1, 28, 13, 42, 28, 750, DateTimeKind.Local).AddTicks(8297) },
                    { 73, "Emie", "Ward", new DateTime(2023, 9, 22, 1, 59, 55, 244, DateTimeKind.Local).AddTicks(8580) },
                    { 74, "Yasmeen", "Ruecker", new DateTime(2021, 10, 8, 20, 45, 54, 76, DateTimeKind.Local).AddTicks(3169) },
                    { 75, "Dejuan", "O'Hara", new DateTime(2022, 4, 17, 12, 52, 7, 116, DateTimeKind.Local).AddTicks(5417) },
                    { 76, "Joanie", "Watsica", new DateTime(2020, 1, 24, 13, 14, 17, 479, DateTimeKind.Local).AddTicks(3724) },
                    { 77, "Zoie", "Rosenbaum", new DateTime(2021, 6, 1, 20, 27, 8, 483, DateTimeKind.Local).AddTicks(7703) },
                    { 78, "Ignacio", "Lind", new DateTime(2022, 8, 20, 10, 8, 18, 278, DateTimeKind.Local).AddTicks(5996) }
                });

            migrationBuilder.InsertData(
                table: "Authors",
                columns: new[] { "AuthorId", "FirstName", "LastName", "LastUpdated" },
                values: new object[,]
                {
                    { 79, "Axel", "Wehner", new DateTime(2017, 6, 7, 5, 26, 46, 494, DateTimeKind.Local).AddTicks(3832) },
                    { 80, "Colton", "Dare", new DateTime(2021, 11, 10, 14, 24, 28, 763, DateTimeKind.Local).AddTicks(2412) },
                    { 81, "Elyssa", "Kerluke", new DateTime(2023, 1, 10, 8, 57, 49, 51, DateTimeKind.Local).AddTicks(3814) },
                    { 82, "Ransom", "Blick", new DateTime(2023, 10, 29, 5, 30, 53, 74, DateTimeKind.Local).AddTicks(3611) },
                    { 83, "Marianna", "Bartell", new DateTime(2018, 6, 9, 10, 51, 50, 809, DateTimeKind.Local).AddTicks(9505) },
                    { 84, "Kari", "Pfeffer", new DateTime(2021, 2, 2, 15, 9, 30, 243, DateTimeKind.Local).AddTicks(1437) },
                    { 85, "Cruz", "Konopelski", new DateTime(2016, 3, 19, 14, 33, 32, 243, DateTimeKind.Local).AddTicks(7486) },
                    { 86, "Manley", "Glover", new DateTime(2019, 11, 2, 6, 5, 3, 505, DateTimeKind.Local).AddTicks(6672) },
                    { 87, "Abbigail", "Boehm", new DateTime(2018, 2, 24, 11, 7, 38, 608, DateTimeKind.Local).AddTicks(6316) },
                    { 88, "Yazmin", "Sanford", new DateTime(2020, 3, 21, 14, 31, 21, 380, DateTimeKind.Local).AddTicks(9406) },
                    { 89, "Lucie", "Haag", new DateTime(2020, 7, 17, 23, 2, 33, 947, DateTimeKind.Local).AddTicks(1062) },
                    { 90, "Delores", "Klein", new DateTime(2021, 6, 9, 15, 40, 10, 432, DateTimeKind.Local).AddTicks(5080) },
                    { 91, "Ryleigh", "Upton", new DateTime(2019, 8, 10, 14, 33, 47, 349, DateTimeKind.Local).AddTicks(4999) },
                    { 92, "Dillan", "Towne", new DateTime(2017, 10, 3, 9, 28, 39, 652, DateTimeKind.Local).AddTicks(1076) },
                    { 93, "Cedrick", "Pouros", new DateTime(2017, 12, 12, 1, 41, 55, 857, DateTimeKind.Local).AddTicks(7119) },
                    { 94, "Lavonne", "Jakubowski", new DateTime(2016, 11, 13, 23, 57, 2, 736, DateTimeKind.Local).AddTicks(2711) },
                    { 95, "Rebeka", "Murphy", new DateTime(2020, 5, 16, 4, 44, 44, 648, DateTimeKind.Local).AddTicks(892) },
                    { 96, "Shea", "Pfeffer", new DateTime(2016, 2, 25, 20, 25, 52, 359, DateTimeKind.Local).AddTicks(4958) },
                    { 97, "Ellsworth", "Stiedemann", new DateTime(2022, 10, 18, 5, 50, 18, 788, DateTimeKind.Local).AddTicks(5492) },
                    { 98, "Dolores", "Hartmann", new DateTime(2019, 7, 20, 19, 58, 51, 732, DateTimeKind.Local).AddTicks(1850) },
                    { 99, "Ayden", "Spencer", new DateTime(2021, 2, 11, 4, 6, 44, 413, DateTimeKind.Local).AddTicks(625) },
                    { 100, "Josie", "Lebsack", new DateTime(2020, 11, 27, 6, 32, 44, 156, DateTimeKind.Local).AddTicks(2101) }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 1, 33, 24.479264678140085m, new DateTime(2021, 6, 27, 2, 22, 11, 479, DateTimeKind.Local).AddTicks(6173), "revolutionize revolutionary infomediaries" },
                    { 2, 49, 68.255467339369205m, new DateTime(2016, 4, 2, 11, 54, 2, 61, DateTimeKind.Local).AddTicks(9021), "implement out-of-the-box synergies" },
                    { 3, 43, 8.8204960232215195m, new DateTime(2020, 12, 12, 5, 25, 44, 457, DateTimeKind.Local).AddTicks(6133), "matrix compelling relationships" },
                    { 4, 26, 51.31686522397760m, new DateTime(2016, 8, 17, 17, 8, 3, 804, DateTimeKind.Local).AddTicks(2015), "visualize ubiquitous schemas" },
                    { 5, 31, 5.44815203919549325m, new DateTime(2021, 1, 12, 12, 36, 50, 365, DateTimeKind.Local).AddTicks(944), "evolve vertical architectures" },
                    { 6, 91, 87.088471470313495m, new DateTime(2020, 2, 7, 23, 14, 48, 218, DateTimeKind.Local).AddTicks(1541), "orchestrate holistic networks" },
                    { 7, 13, 95.285344343968955m, new DateTime(2017, 10, 30, 13, 34, 21, 438, DateTimeKind.Local).AddTicks(2679), "benchmark best-of-breed eyeballs" },
                    { 8, 80, 99.883538290887880m, new DateTime(2015, 5, 23, 4, 58, 51, 350, DateTimeKind.Local).AddTicks(3509), "redefine out-of-the-box convergence" },
                    { 9, 98, 63.755362054517165m, new DateTime(2021, 2, 1, 4, 2, 57, 350, DateTimeKind.Local).AddTicks(9893), "synergize 24/365 platforms" },
                    { 10, 95, 22.093960554329220m, new DateTime(2020, 2, 14, 16, 36, 35, 750, DateTimeKind.Local).AddTicks(7616), "mesh user-centric convergence" },
                    { 11, 70, 77.519898798957595m, new DateTime(2015, 7, 12, 16, 55, 5, 561, DateTimeKind.Local).AddTicks(832), "integrate synergistic channels" },
                    { 12, 94, 45.115116567447025m, new DateTime(2017, 7, 12, 2, 30, 1, 937, DateTimeKind.Local).AddTicks(3902), "grow distributed methodologies" },
                    { 13, 52, 74.121121875002625m, new DateTime(2021, 11, 11, 13, 20, 7, 696, DateTimeKind.Local).AddTicks(7336), "benchmark viral metrics" },
                    { 14, 51, 61.973227631221760m, new DateTime(2021, 6, 14, 23, 21, 2, 24, DateTimeKind.Local).AddTicks(5834), "transform distributed models" },
                    { 15, 77, 6.8533638450224525m, new DateTime(2015, 9, 25, 8, 16, 50, 672, DateTimeKind.Local).AddTicks(1391), "transform integrated technologies" },
                    { 16, 66, 37.989320781375665m, new DateTime(2024, 1, 26, 12, 16, 59, 713, DateTimeKind.Local).AddTicks(1471), "matrix end-to-end synergies" },
                    { 17, 16, 99.283056045203320m, new DateTime(2018, 4, 9, 21, 13, 19, 621, DateTimeKind.Local).AddTicks(2302), "target strategic methodologies" },
                    { 18, 41, 89.123633121111370m, new DateTime(2015, 7, 14, 23, 27, 34, 198, DateTimeKind.Local).AddTicks(3004), "maximize granular channels" },
                    { 19, 48, 79.535442928118460m, new DateTime(2016, 2, 11, 16, 43, 38, 308, DateTimeKind.Local).AddTicks(8358), "recontextualize integrated networks" },
                    { 20, 2, 36.442345556080605m, new DateTime(2023, 4, 9, 15, 11, 8, 107, DateTimeKind.Local).AddTicks(8728), "monetize cross-platform infomediaries" },
                    { 21, 24, 19.893352873701845m, new DateTime(2022, 7, 12, 17, 50, 59, 17, DateTimeKind.Local).AddTicks(6498), "redefine open-source channels" },
                    { 22, 4, 44.70621944881610m, new DateTime(2023, 2, 1, 19, 9, 37, 239, DateTimeKind.Local).AddTicks(1172), "extend clicks-and-mortar portals" },
                    { 23, 66, 26.562612238939560m, new DateTime(2016, 4, 24, 18, 40, 52, 804, DateTimeKind.Local).AddTicks(9136), "scale innovative e-services" },
                    { 24, 63, 50.523975768730380m, new DateTime(2023, 2, 13, 6, 22, 40, 731, DateTimeKind.Local).AddTicks(4940), "whiteboard scalable e-business" },
                    { 25, 56, 24.995927303854445m, new DateTime(2016, 4, 26, 9, 7, 27, 359, DateTimeKind.Local).AddTicks(7116), "transform enterprise architectures" },
                    { 26, 86, 33.866326739348640m, new DateTime(2021, 3, 5, 13, 45, 41, 122, DateTimeKind.Local).AddTicks(9614), "productize bleeding-edge functionalities" },
                    { 27, 95, 32.608406329620740m, new DateTime(2014, 9, 26, 15, 38, 36, 18, DateTimeKind.Local).AddTicks(4875), "brand synergistic paradigms" },
                    { 28, 27, 99.008472591130305m, new DateTime(2020, 7, 10, 12, 30, 39, 453, DateTimeKind.Local).AddTicks(174), "enable compelling e-markets" },
                    { 29, 57, 14.0021942768703120m, new DateTime(2023, 8, 30, 10, 24, 52, 593, DateTimeKind.Local).AddTicks(2999), "aggregate robust e-business" },
                    { 30, 91, 11.240573638386020m, new DateTime(2016, 9, 19, 9, 8, 52, 579, DateTimeKind.Local).AddTicks(2922), "streamline front-end solutions" },
                    { 31, 20, 23.396890451840565m, new DateTime(2021, 9, 13, 20, 21, 21, 864, DateTimeKind.Local).AddTicks(2314), "transform enterprise functionalities" },
                    { 32, 22, 6.1852384839671440m, new DateTime(2023, 7, 29, 21, 8, 9, 322, DateTimeKind.Local).AddTicks(9313), "whiteboard best-of-breed e-commerce" },
                    { 33, 19, 50.038427728197525m, new DateTime(2023, 5, 27, 20, 42, 52, 311, DateTimeKind.Local).AddTicks(3514), "orchestrate end-to-end infrastructures" },
                    { 34, 15, 86.302946218380935m, new DateTime(2019, 2, 5, 3, 9, 45, 564, DateTimeKind.Local).AddTicks(3615), "evolve bricks-and-clicks content" },
                    { 35, 5, 52.598201810333460m, new DateTime(2018, 12, 17, 7, 5, 57, 400, DateTimeKind.Local).AddTicks(4540), "syndicate cross-platform relationships" },
                    { 36, 72, 25.383415374193055m, new DateTime(2020, 12, 2, 23, 42, 44, 504, DateTimeKind.Local).AddTicks(5162), "enhance distributed supply-chains" },
                    { 37, 39, 76.728659223100215m, new DateTime(2023, 1, 27, 6, 1, 37, 385, DateTimeKind.Local).AddTicks(7363), "optimize killer solutions" },
                    { 38, 67, 93.353472643196830m, new DateTime(2019, 3, 14, 0, 14, 44, 601, DateTimeKind.Local).AddTicks(5211), "visualize vertical e-commerce" },
                    { 39, 86, 63.988596586604745m, new DateTime(2021, 7, 6, 5, 34, 42, 29, DateTimeKind.Local).AddTicks(1537), "repurpose real-time architectures" },
                    { 40, 23, 42.922719539208060m, new DateTime(2022, 8, 13, 14, 47, 31, 722, DateTimeKind.Local).AddTicks(2270), "morph plug-and-play models" },
                    { 41, 30, 8.52974656792885m, new DateTime(2021, 7, 6, 12, 37, 47, 16, DateTimeKind.Local).AddTicks(1752), "synthesize user-centric platforms" },
                    { 42, 53, 71.34790223509245m, new DateTime(2022, 11, 2, 22, 52, 43, 471, DateTimeKind.Local).AddTicks(5304), "redefine e-business systems" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 43, 7, 96.239730057226880m, new DateTime(2014, 5, 6, 2, 42, 19, 710, DateTimeKind.Local).AddTicks(9399), "streamline world-class mindshare" },
                    { 44, 16, 76.746533539634225m, new DateTime(2021, 3, 27, 7, 16, 48, 775, DateTimeKind.Local).AddTicks(4770), "visualize front-end web services" },
                    { 45, 55, 82.149392507607065m, new DateTime(2021, 12, 29, 21, 39, 3, 439, DateTimeKind.Local).AddTicks(9716), "morph viral users" },
                    { 46, 100, 10.9714552759925390m, new DateTime(2015, 11, 10, 9, 3, 24, 11, DateTimeKind.Local).AddTicks(2495), "seize cutting-edge content" },
                    { 47, 51, 23.270695812969160m, new DateTime(2014, 4, 29, 2, 46, 48, 477, DateTimeKind.Local).AddTicks(2082), "transform 24/365 web-readiness" },
                    { 48, 45, 49.797437197618845m, new DateTime(2022, 11, 23, 15, 19, 25, 242, DateTimeKind.Local).AddTicks(6828), "deploy distributed partnerships" },
                    { 49, 10, 50.727364107935340m, new DateTime(2023, 2, 27, 8, 11, 8, 625, DateTimeKind.Local).AddTicks(8597), "orchestrate user-centric networks" },
                    { 50, 45, 84.352328999409430m, new DateTime(2019, 10, 29, 1, 33, 40, 595, DateTimeKind.Local).AddTicks(4429), "monetize wireless eyeballs" },
                    { 51, 82, 31.193393866761525m, new DateTime(2021, 5, 11, 14, 15, 24, 648, DateTimeKind.Local).AddTicks(9031), "seize interactive platforms" },
                    { 52, 94, 39.869736214999255m, new DateTime(2018, 8, 28, 15, 45, 52, 245, DateTimeKind.Local).AddTicks(1447), "extend strategic convergence" },
                    { 53, 23, 89.628570868623005m, new DateTime(2014, 10, 30, 18, 3, 23, 263, DateTimeKind.Local).AddTicks(1410), "morph transparent ROI" },
                    { 54, 41, 39.889104356097290m, new DateTime(2016, 10, 3, 16, 7, 9, 231, DateTimeKind.Local).AddTicks(3400), "recontextualize intuitive markets" },
                    { 55, 15, 34.617733068882240m, new DateTime(2016, 6, 1, 0, 19, 31, 272, DateTimeKind.Local).AddTicks(6357), "monetize visionary mindshare" },
                    { 56, 37, 61.84256626564565m, new DateTime(2018, 11, 23, 11, 20, 39, 187, DateTimeKind.Local).AddTicks(2150), "embrace synergistic schemas" },
                    { 57, 33, 7.7384927375727735m, new DateTime(2018, 5, 22, 21, 52, 52, 740, DateTimeKind.Local).AddTicks(1704), "engage customized communities" },
                    { 58, 12, 72.114059315640880m, new DateTime(2017, 9, 23, 0, 35, 39, 277, DateTimeKind.Local).AddTicks(2730), "synthesize extensible communities" },
                    { 59, 2, 37.839805736957765m, new DateTime(2015, 6, 29, 18, 6, 33, 554, DateTimeKind.Local).AddTicks(7508), "transform collaborative markets" },
                    { 60, 10, 99.657346127110125m, new DateTime(2022, 6, 30, 10, 37, 29, 393, DateTimeKind.Local).AddTicks(6784), "leverage wireless deliverables" },
                    { 61, 40, 96.138883745683620m, new DateTime(2021, 5, 25, 11, 34, 25, 612, DateTimeKind.Local).AddTicks(1094), "streamline real-time content" },
                    { 62, 53, 14.018329083017040m, new DateTime(2017, 3, 30, 5, 14, 55, 226, DateTimeKind.Local).AddTicks(9232), "empower granular interfaces" },
                    { 63, 16, 7.7901284278050705m, new DateTime(2022, 6, 8, 2, 5, 12, 343, DateTimeKind.Local).AddTicks(2633), "optimize wireless architectures" },
                    { 64, 70, 27.31099782309995m, new DateTime(2019, 10, 26, 23, 53, 43, 720, DateTimeKind.Local).AddTicks(2593), "envisioneer clicks-and-mortar partnerships" },
                    { 65, 44, 32.139891275132090m, new DateTime(2023, 8, 2, 16, 27, 10, 982, DateTimeKind.Local).AddTicks(9815), "seize vertical schemas" },
                    { 66, 66, 16.839311882398715m, new DateTime(2021, 11, 5, 12, 8, 56, 518, DateTimeKind.Local).AddTicks(790), "synergize plug-and-play architectures" },
                    { 67, 71, 90.431703369604310m, new DateTime(2022, 3, 13, 19, 11, 5, 835, DateTimeKind.Local).AddTicks(3811), "monetize value-added infomediaries" },
                    { 68, 95, 93.481086225089775m, new DateTime(2015, 12, 6, 7, 7, 20, 720, DateTimeKind.Local).AddTicks(3382), "visualize holistic initiatives" },
                    { 69, 43, 50.373020496099570m, new DateTime(2019, 9, 7, 1, 26, 47, 364, DateTimeKind.Local).AddTicks(554), "envisioneer turn-key functionalities" },
                    { 70, 63, 85.54196516285595m, new DateTime(2022, 7, 8, 12, 30, 13, 161, DateTimeKind.Local).AddTicks(6274), "grow bricks-and-clicks e-services" },
                    { 71, 38, 16.293071606982515m, new DateTime(2017, 1, 6, 17, 40, 56, 610, DateTimeKind.Local).AddTicks(9926), "strategize scalable e-commerce" },
                    { 72, 25, 44.479332164339675m, new DateTime(2020, 3, 3, 18, 30, 59, 123, DateTimeKind.Local).AddTicks(7660), "expedite cross-platform systems" },
                    { 73, 8, 32.8160330589645m, new DateTime(2018, 11, 20, 17, 23, 50, 598, DateTimeKind.Local).AddTicks(2052), "deploy cutting-edge users" },
                    { 74, 74, 47.339045235730640m, new DateTime(2019, 5, 11, 23, 28, 30, 801, DateTimeKind.Local).AddTicks(6280), "productize ubiquitous experiences" },
                    { 75, 16, 24.872518748963945m, new DateTime(2019, 2, 11, 12, 7, 7, 211, DateTimeKind.Local).AddTicks(4497), "strategize proactive initiatives" },
                    { 76, 24, 83.736256162684355m, new DateTime(2021, 9, 3, 18, 29, 37, 1, DateTimeKind.Local).AddTicks(528), "incubate distributed metrics" },
                    { 77, 14, 82.870579820423905m, new DateTime(2021, 8, 9, 13, 16, 6, 503, DateTimeKind.Local).AddTicks(7662), "streamline proactive e-business" },
                    { 78, 8, 57.542402414849070m, new DateTime(2015, 9, 14, 20, 18, 40, 970, DateTimeKind.Local).AddTicks(2379), "innovate granular metrics" },
                    { 79, 84, 12.3042699243239930m, new DateTime(2019, 7, 7, 18, 30, 21, 251, DateTimeKind.Local).AddTicks(3594), "monetize seamless e-commerce" },
                    { 80, 76, 86.038982703467810m, new DateTime(2024, 3, 12, 18, 39, 28, 740, DateTimeKind.Local).AddTicks(2435), "maximize one-to-one e-markets" },
                    { 81, 99, 39.203885042551440m, new DateTime(2018, 6, 26, 12, 26, 25, 373, DateTimeKind.Local).AddTicks(6166), "orchestrate granular infomediaries" },
                    { 82, 7, 73.059967443363015m, new DateTime(2018, 7, 17, 13, 10, 52, 33, DateTimeKind.Local).AddTicks(7511), "deliver bricks-and-clicks metrics" },
                    { 83, 28, 61.829849096478175m, new DateTime(2023, 5, 5, 5, 15, 33, 504, DateTimeKind.Local).AddTicks(3097), "productize global e-services" },
                    { 84, 71, 28.529341684240015m, new DateTime(2023, 8, 27, 7, 37, 31, 905, DateTimeKind.Local).AddTicks(5120), "optimize frictionless eyeballs" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 85, 88, 49.357300991752495m, new DateTime(2019, 7, 28, 6, 56, 19, 681, DateTimeKind.Local).AddTicks(732), "leverage viral ROI" },
                    { 86, 7, 43.340797629506265m, new DateTime(2022, 1, 25, 17, 48, 46, 423, DateTimeKind.Local).AddTicks(8237), "deploy out-of-the-box deliverables" },
                    { 87, 78, 20.885296804394245m, new DateTime(2016, 10, 7, 10, 53, 11, 64, DateTimeKind.Local).AddTicks(6813), "e-enable granular e-commerce" },
                    { 88, 68, 63.34243851010730m, new DateTime(2021, 12, 8, 20, 18, 53, 109, DateTimeKind.Local).AddTicks(1191), "leverage enterprise schemas" },
                    { 89, 74, 14.1956914435446020m, new DateTime(2020, 12, 8, 7, 14, 42, 741, DateTimeKind.Local).AddTicks(8129), "transition strategic communities" },
                    { 90, 11, 40.583768179829355m, new DateTime(2017, 1, 19, 20, 31, 5, 614, DateTimeKind.Local).AddTicks(6212), "strategize ubiquitous architectures" },
                    { 91, 82, 10.2900640174381320m, new DateTime(2018, 4, 27, 22, 8, 51, 866, DateTimeKind.Local).AddTicks(3810), "architect dot-com architectures" },
                    { 92, 62, 27.032141301958875m, new DateTime(2018, 8, 24, 9, 31, 0, 181, DateTimeKind.Local).AddTicks(9045), "empower integrated markets" },
                    { 93, 20, 18.306915748604065m, new DateTime(2020, 8, 21, 11, 14, 6, 189, DateTimeKind.Local).AddTicks(9908), "enhance intuitive deliverables" },
                    { 94, 98, 61.947639130933620m, new DateTime(2016, 12, 21, 7, 23, 39, 994, DateTimeKind.Local).AddTicks(4620), "recontextualize impactful users" },
                    { 95, 73, 37.623890238238280m, new DateTime(2016, 10, 8, 7, 32, 6, 779, DateTimeKind.Local).AddTicks(1795), "drive bricks-and-clicks mindshare" },
                    { 96, 87, 19.720589908312895m, new DateTime(2023, 12, 12, 10, 51, 48, 617, DateTimeKind.Local).AddTicks(9845), "syndicate user-centric infomediaries" },
                    { 97, 37, 23.09025889315935m, new DateTime(2020, 6, 18, 6, 33, 54, 843, DateTimeKind.Local).AddTicks(2226), "maximize intuitive technologies" },
                    { 98, 92, 90.239696883341365m, new DateTime(2017, 2, 26, 9, 2, 45, 550, DateTimeKind.Local).AddTicks(8663), "unleash value-added e-markets" },
                    { 99, 20, 43.905083972372005m, new DateTime(2015, 5, 15, 3, 44, 46, 356, DateTimeKind.Local).AddTicks(1190), "revolutionize virtual applications" },
                    { 100, 85, 69.520925300706220m, new DateTime(2018, 1, 23, 7, 28, 2, 534, DateTimeKind.Local).AddTicks(2778), "harness efficient bandwidth" },
                    { 101, 34, 79.685259560383190m, new DateTime(2021, 9, 27, 18, 50, 50, 257, DateTimeKind.Local).AddTicks(4093), "synthesize cross-media systems" },
                    { 102, 65, 45.320632373125145m, new DateTime(2021, 3, 3, 3, 58, 44, 766, DateTimeKind.Local).AddTicks(8369), "facilitate front-end schemas" },
                    { 103, 75, 19.924343821598375m, new DateTime(2018, 1, 28, 3, 5, 0, 87, DateTimeKind.Local).AddTicks(1308), "maximize mission-critical schemas" },
                    { 104, 29, 8.1173357815494155m, new DateTime(2017, 12, 30, 7, 50, 46, 459, DateTimeKind.Local).AddTicks(4971), "generate efficient users" },
                    { 105, 29, 17.699874164219345m, new DateTime(2017, 9, 26, 11, 5, 1, 72, DateTimeKind.Local).AddTicks(2014), "envisioneer user-centric methodologies" },
                    { 106, 47, 30.997837484386745m, new DateTime(2018, 2, 14, 22, 10, 28, 678, DateTimeKind.Local).AddTicks(4194), "repurpose end-to-end convergence" },
                    { 107, 98, 96.45472372025085m, new DateTime(2017, 12, 3, 18, 2, 35, 786, DateTimeKind.Local).AddTicks(3735), "disintermediate ubiquitous web services" },
                    { 108, 42, 57.440107823141895m, new DateTime(2019, 10, 17, 2, 7, 20, 919, DateTimeKind.Local).AddTicks(7523), "implement 24/7 initiatives" },
                    { 109, 26, 56.726674946507335m, new DateTime(2019, 9, 1, 22, 26, 53, 417, DateTimeKind.Local).AddTicks(931), "target innovative schemas" },
                    { 110, 48, 52.611749210762355m, new DateTime(2016, 11, 2, 5, 59, 3, 362, DateTimeKind.Local).AddTicks(3438), "matrix back-end partnerships" },
                    { 111, 81, 76.96484665078970m, new DateTime(2019, 3, 19, 10, 19, 12, 859, DateTimeKind.Local).AddTicks(4850), "syndicate efficient niches" },
                    { 112, 51, 41.384030648853115m, new DateTime(2017, 5, 7, 6, 53, 34, 880, DateTimeKind.Local).AddTicks(9229), "generate magnetic infrastructures" },
                    { 113, 69, 59.456497161334860m, new DateTime(2018, 8, 15, 1, 53, 21, 484, DateTimeKind.Local).AddTicks(35), "scale ubiquitous e-services" },
                    { 114, 72, 24.797629534594060m, new DateTime(2018, 11, 5, 1, 30, 10, 257, DateTimeKind.Local).AddTicks(1390), "cultivate turn-key synergies" },
                    { 115, 75, 79.49952525298220m, new DateTime(2020, 9, 30, 12, 1, 6, 499, DateTimeKind.Local).AddTicks(2267), "e-enable granular blockchains" },
                    { 116, 95, 96.765632276546560m, new DateTime(2018, 2, 25, 20, 40, 5, 1, DateTimeKind.Local).AddTicks(3460), "synergize turn-key e-commerce" },
                    { 117, 49, 77.257915326477725m, new DateTime(2018, 2, 2, 2, 11, 52, 297, DateTimeKind.Local).AddTicks(574), "generate B2B interfaces" },
                    { 118, 22, 19.329133893478380m, new DateTime(2021, 6, 10, 6, 25, 42, 750, DateTimeKind.Local).AddTicks(7000), "strategize cross-platform partnerships" },
                    { 119, 2, 21.613364765474405m, new DateTime(2017, 10, 1, 15, 52, 55, 995, DateTimeKind.Local).AddTicks(6421), "enhance value-added bandwidth" },
                    { 120, 33, 81.610479463224360m, new DateTime(2021, 11, 26, 19, 19, 0, 955, DateTimeKind.Local).AddTicks(9692), "generate innovative e-tailers" },
                    { 121, 16, 96.403813662190185m, new DateTime(2020, 12, 9, 3, 53, 47, 679, DateTimeKind.Local).AddTicks(4023), "optimize vertical schemas" },
                    { 122, 100, 9.2016160008499875m, new DateTime(2019, 6, 1, 18, 56, 23, 244, DateTimeKind.Local).AddTicks(6114), "strategize proactive web-readiness" },
                    { 123, 26, 41.544648908598060m, new DateTime(2015, 10, 6, 18, 32, 50, 94, DateTimeKind.Local).AddTicks(6700), "deliver seamless platforms" },
                    { 124, 65, 70.027143574771645m, new DateTime(2014, 7, 9, 16, 1, 13, 654, DateTimeKind.Local).AddTicks(2856), "empower virtual platforms" },
                    { 125, 25, 16.097575136885745m, new DateTime(2021, 6, 14, 3, 24, 48, 222, DateTimeKind.Local).AddTicks(3358), "drive 24/7 e-commerce" },
                    { 126, 56, 75.347988219618125m, new DateTime(2021, 8, 19, 4, 29, 23, 19, DateTimeKind.Local).AddTicks(6801), "benchmark dynamic schemas" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 127, 64, 83.217349167955090m, new DateTime(2023, 2, 26, 20, 54, 25, 514, DateTimeKind.Local).AddTicks(4063), "aggregate extensible networks" },
                    { 128, 26, 76.874960339890955m, new DateTime(2020, 1, 17, 11, 7, 10, 242, DateTimeKind.Local).AddTicks(1676), "syndicate rich functionalities" },
                    { 129, 82, 69.004492490630435m, new DateTime(2016, 3, 10, 5, 4, 33, 87, DateTimeKind.Local).AddTicks(1815), "scale customized deliverables" },
                    { 130, 2, 97.9882771821195m, new DateTime(2020, 1, 12, 23, 33, 41, 936, DateTimeKind.Local).AddTicks(6293), "innovate virtual convergence" },
                    { 131, 47, 24.405963518187560m, new DateTime(2018, 7, 20, 18, 31, 29, 643, DateTimeKind.Local).AddTicks(6957), "matrix compelling e-markets" },
                    { 132, 89, 36.453903293469090m, new DateTime(2016, 8, 26, 2, 50, 8, 405, DateTimeKind.Local).AddTicks(2458), "harness killer schemas" },
                    { 133, 29, 52.361464088955010m, new DateTime(2019, 7, 18, 11, 26, 37, 314, DateTimeKind.Local).AddTicks(942), "transform frictionless infrastructures" },
                    { 134, 89, 97.740028332661445m, new DateTime(2017, 12, 14, 3, 30, 45, 5, DateTimeKind.Local).AddTicks(175), "iterate scalable users" },
                    { 135, 79, 80.674318868293670m, new DateTime(2018, 9, 3, 21, 13, 6, 688, DateTimeKind.Local).AddTicks(1928), "transform best-of-breed eyeballs" },
                    { 136, 90, 14.95699414334790m, new DateTime(2019, 12, 28, 2, 4, 36, 88, DateTimeKind.Local).AddTicks(4082), "orchestrate collaborative e-business" },
                    { 137, 56, 58.958369237874930m, new DateTime(2023, 7, 16, 8, 41, 25, 324, DateTimeKind.Local).AddTicks(8619), "revolutionize wireless infomediaries" },
                    { 138, 87, 28.930207876466040m, new DateTime(2015, 8, 17, 22, 43, 5, 622, DateTimeKind.Local).AddTicks(5677), "seize transparent functionalities" },
                    { 139, 56, 56.382719507781415m, new DateTime(2022, 10, 15, 3, 44, 9, 263, DateTimeKind.Local).AddTicks(1585), "repurpose holistic web-readiness" },
                    { 140, 35, 70.198493760986910m, new DateTime(2018, 6, 25, 3, 53, 44, 137, DateTimeKind.Local).AddTicks(1578), "seize enterprise technologies" },
                    { 141, 12, 61.765655300563205m, new DateTime(2016, 12, 13, 9, 59, 29, 431, DateTimeKind.Local).AddTicks(2918), "target magnetic applications" },
                    { 142, 59, 97.496487148509855m, new DateTime(2018, 1, 15, 14, 32, 31, 171, DateTimeKind.Local).AddTicks(4318), "productize cross-platform mindshare" },
                    { 143, 89, 69.899159991576355m, new DateTime(2015, 8, 21, 1, 21, 57, 587, DateTimeKind.Local).AddTicks(4207), "transition e-business mindshare" },
                    { 144, 2, 34.228335521291570m, new DateTime(2021, 4, 20, 12, 38, 5, 421, DateTimeKind.Local).AddTicks(4231), "generate one-to-one ROI" },
                    { 145, 19, 20.876633004674955m, new DateTime(2023, 6, 22, 23, 29, 5, 810, DateTimeKind.Local).AddTicks(2510), "grow B2B solutions" },
                    { 146, 92, 12.8121671941470005m, new DateTime(2018, 4, 2, 4, 23, 9, 879, DateTimeKind.Local).AddTicks(1194), "optimize seamless bandwidth" },
                    { 147, 17, 74.968310150345435m, new DateTime(2021, 12, 3, 19, 15, 59, 53, DateTimeKind.Local).AddTicks(9902), "redefine compelling schemas" },
                    { 148, 2, 59.41459194395585m, new DateTime(2021, 8, 17, 8, 50, 39, 261, DateTimeKind.Local).AddTicks(7812), "generate cross-media relationships" },
                    { 149, 22, 41.59110693877240m, new DateTime(2014, 10, 3, 13, 0, 42, 249, DateTimeKind.Local).AddTicks(1326), "incentivize world-class deliverables" },
                    { 150, 34, 10.4349717890319165m, new DateTime(2015, 8, 16, 1, 45, 8, 877, DateTimeKind.Local).AddTicks(8947), "morph customized initiatives" },
                    { 151, 29, 36.137884927879060m, new DateTime(2020, 5, 9, 0, 24, 49, 631, DateTimeKind.Local).AddTicks(8223), "unleash cutting-edge interfaces" },
                    { 152, 92, 26.399848657351565m, new DateTime(2019, 7, 5, 5, 45, 44, 573, DateTimeKind.Local).AddTicks(708), "empower strategic infomediaries" },
                    { 153, 99, 61.904463949776175m, new DateTime(2023, 12, 3, 20, 51, 16, 100, DateTimeKind.Local).AddTicks(4542), "streamline end-to-end e-markets" },
                    { 154, 33, 64.908720284550755m, new DateTime(2018, 1, 19, 20, 14, 59, 616, DateTimeKind.Local).AddTicks(9169), "whiteboard sticky e-services" },
                    { 155, 11, 77.446637273556260m, new DateTime(2020, 7, 7, 9, 57, 58, 691, DateTimeKind.Local).AddTicks(7151), "benchmark viral blockchains" },
                    { 156, 59, 53.597411293512370m, new DateTime(2017, 3, 31, 1, 43, 47, 550, DateTimeKind.Local).AddTicks(5349), "reintermediate impactful infomediaries" },
                    { 157, 16, 54.885126031344945m, new DateTime(2015, 6, 4, 19, 58, 38, 434, DateTimeKind.Local).AddTicks(9656), "reinvent virtual communities" },
                    { 158, 89, 9.9464929914053830m, new DateTime(2020, 7, 21, 18, 46, 34, 629, DateTimeKind.Local).AddTicks(3165), "incubate B2B synergies" },
                    { 159, 74, 78.583963962869995m, new DateTime(2016, 6, 7, 15, 3, 16, 81, DateTimeKind.Local).AddTicks(7026), "envisioneer open-source e-services" },
                    { 160, 83, 39.652262358967480m, new DateTime(2022, 1, 29, 0, 34, 57, 161, DateTimeKind.Local).AddTicks(7185), "synthesize revolutionary channels" },
                    { 161, 22, 71.34689054485220m, new DateTime(2015, 4, 7, 5, 27, 50, 479, DateTimeKind.Local).AddTicks(4275), "monetize robust vortals" },
                    { 162, 79, 41.559213603688370m, new DateTime(2015, 7, 16, 6, 44, 23, 735, DateTimeKind.Local).AddTicks(875), "innovate front-end vortals" },
                    { 163, 45, 25.692901188174120m, new DateTime(2017, 5, 6, 5, 20, 38, 294, DateTimeKind.Local).AddTicks(6622), "extend end-to-end blockchains" },
                    { 164, 68, 78.627430243400315m, new DateTime(2017, 10, 10, 1, 13, 32, 361, DateTimeKind.Local).AddTicks(9462), "integrate real-time e-markets" },
                    { 165, 90, 16.296336088146320m, new DateTime(2023, 3, 25, 0, 25, 0, 310, DateTimeKind.Local).AddTicks(3924), "grow killer methodologies" },
                    { 166, 57, 8.1027542106330660m, new DateTime(2021, 6, 5, 19, 14, 28, 580, DateTimeKind.Local).AddTicks(3865), "incentivize bricks-and-clicks networks" },
                    { 167, 36, 39.855468317648295m, new DateTime(2017, 2, 23, 6, 19, 41, 445, DateTimeKind.Local).AddTicks(5381), "innovate compelling vortals" },
                    { 168, 44, 10.1991034154869270m, new DateTime(2021, 1, 21, 22, 9, 0, 927, DateTimeKind.Local).AddTicks(6419), "innovate interactive infomediaries" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 169, 41, 72.082521376485m, new DateTime(2022, 2, 9, 17, 36, 47, 603, DateTimeKind.Local).AddTicks(6683), "brand real-time systems" },
                    { 170, 6, 8.1104657735428045m, new DateTime(2022, 6, 19, 15, 46, 6, 557, DateTimeKind.Local).AddTicks(7514), "architect plug-and-play web services" },
                    { 171, 40, 84.825470591920595m, new DateTime(2019, 10, 16, 17, 18, 13, 554, DateTimeKind.Local).AddTicks(5992), "disintermediate cross-media synergies" },
                    { 172, 28, 82.671719165043770m, new DateTime(2020, 6, 14, 19, 27, 56, 940, DateTimeKind.Local).AddTicks(6302), "synergize magnetic bandwidth" },
                    { 173, 19, 91.449440761422920m, new DateTime(2014, 7, 3, 3, 30, 27, 651, DateTimeKind.Local).AddTicks(2313), "synthesize B2C e-services" },
                    { 174, 15, 24.768211528289645m, new DateTime(2015, 5, 9, 16, 42, 46, 35, DateTimeKind.Local).AddTicks(1960), "reinvent cross-platform methodologies" },
                    { 175, 84, 15.289727784246690m, new DateTime(2019, 2, 19, 12, 16, 34, 874, DateTimeKind.Local).AddTicks(9348), "unleash out-of-the-box solutions" },
                    { 176, 72, 78.618956082872070m, new DateTime(2016, 8, 25, 2, 36, 49, 32, DateTimeKind.Local).AddTicks(7827), "enable user-centric metrics" },
                    { 177, 9, 94.947255259900165m, new DateTime(2023, 4, 10, 2, 5, 40, 121, DateTimeKind.Local).AddTicks(6759), "utilize efficient communities" },
                    { 178, 64, 25.823926668127915m, new DateTime(2018, 1, 23, 23, 23, 7, 690, DateTimeKind.Local).AddTicks(4835), "envisioneer clicks-and-mortar synergies" },
                    { 179, 74, 11.4606337369230810m, new DateTime(2017, 11, 15, 22, 31, 45, 979, DateTimeKind.Local).AddTicks(440), "transition compelling paradigms" },
                    { 180, 60, 80.121792933208380m, new DateTime(2019, 9, 2, 18, 25, 57, 187, DateTimeKind.Local).AddTicks(6719), "deploy dynamic bandwidth" },
                    { 181, 75, 90.294249338407195m, new DateTime(2016, 3, 22, 13, 20, 14, 361, DateTimeKind.Local).AddTicks(8497), "harness turn-key paradigms" },
                    { 182, 89, 74.790413403952780m, new DateTime(2020, 11, 10, 23, 38, 39, 912, DateTimeKind.Local).AddTicks(5816), "productize scalable portals" },
                    { 183, 36, 39.53425661963120m, new DateTime(2019, 4, 16, 22, 27, 22, 462, DateTimeKind.Local).AddTicks(5967), "engage real-time partnerships" },
                    { 184, 17, 7.5476182563420275m, new DateTime(2018, 4, 4, 14, 8, 47, 597, DateTimeKind.Local).AddTicks(4160), "enhance B2B niches" },
                    { 185, 44, 92.143206646709565m, new DateTime(2019, 11, 1, 21, 56, 16, 453, DateTimeKind.Local).AddTicks(1076), "integrate open-source networks" },
                    { 186, 54, 93.292371716306705m, new DateTime(2014, 5, 9, 8, 30, 0, 275, DateTimeKind.Local).AddTicks(2492), "orchestrate killer e-tailers" },
                    { 187, 19, 34.725078344352215m, new DateTime(2021, 1, 5, 20, 53, 51, 701, DateTimeKind.Local).AddTicks(2245), "recontextualize ubiquitous infomediaries" },
                    { 188, 12, 20.91129228035960m, new DateTime(2023, 10, 15, 10, 44, 41, 729, DateTimeKind.Local).AddTicks(5941), "grow cross-platform supply-chains" },
                    { 189, 55, 86.604371839657080m, new DateTime(2024, 1, 29, 13, 42, 5, 266, DateTimeKind.Local).AddTicks(6916), "grow leading-edge eyeballs" },
                    { 190, 80, 90.155932096374995m, new DateTime(2014, 7, 28, 8, 59, 13, 427, DateTimeKind.Local).AddTicks(5011), "target bleeding-edge convergence" },
                    { 191, 82, 96.648481640523920m, new DateTime(2021, 3, 7, 1, 51, 33, 454, DateTimeKind.Local).AddTicks(2267), "deploy distributed web services" },
                    { 192, 94, 17.614376208940160m, new DateTime(2017, 1, 8, 3, 27, 47, 68, DateTimeKind.Local).AddTicks(5181), "grow real-time paradigms" },
                    { 193, 72, 15.180657297070720m, new DateTime(2022, 2, 21, 0, 51, 55, 636, DateTimeKind.Local).AddTicks(8158), "empower integrated e-markets" },
                    { 194, 12, 65.485482933634510m, new DateTime(2023, 8, 17, 10, 56, 34, 175, DateTimeKind.Local).AddTicks(134), "target clicks-and-mortar e-commerce" },
                    { 195, 30, 38.676127612897625m, new DateTime(2017, 8, 8, 23, 0, 26, 877, DateTimeKind.Local).AddTicks(5892), "synergize next-generation web-readiness" },
                    { 196, 94, 25.941931884771155m, new DateTime(2023, 8, 14, 14, 8, 27, 265, DateTimeKind.Local).AddTicks(8672), "target front-end web services" },
                    { 197, 49, 27.109704724731775m, new DateTime(2016, 7, 4, 19, 55, 4, 303, DateTimeKind.Local).AddTicks(1937), "generate frictionless e-tailers" },
                    { 198, 31, 92.001406018024870m, new DateTime(2016, 3, 16, 18, 1, 3, 438, DateTimeKind.Local).AddTicks(3469), "redefine innovative mindshare" },
                    { 199, 80, 82.786652274181330m, new DateTime(2024, 1, 27, 18, 28, 27, 359, DateTimeKind.Local).AddTicks(2288), "orchestrate back-end web-readiness" },
                    { 200, 57, 53.837241249462440m, new DateTime(2019, 1, 20, 10, 19, 19, 30, DateTimeKind.Local).AddTicks(7035), "syndicate robust methodologies" },
                    { 201, 72, 16.435528469523020m, new DateTime(2016, 12, 10, 23, 33, 40, 236, DateTimeKind.Local).AddTicks(3610), "synthesize dynamic web services" },
                    { 202, 49, 59.465215136585875m, new DateTime(2018, 4, 9, 1, 15, 54, 132, DateTimeKind.Local).AddTicks(6793), "architect leading-edge users" },
                    { 203, 22, 63.888315678522585m, new DateTime(2018, 11, 10, 12, 29, 12, 604, DateTimeKind.Local).AddTicks(1885), "orchestrate seamless convergence" },
                    { 204, 49, 64.910947220141310m, new DateTime(2024, 2, 21, 0, 10, 21, 978, DateTimeKind.Local).AddTicks(413), "whiteboard world-class supply-chains" },
                    { 205, 96, 9.3111666183048395m, new DateTime(2017, 5, 21, 3, 42, 10, 447, DateTimeKind.Local).AddTicks(2001), "grow bricks-and-clicks methodologies" },
                    { 206, 43, 89.403134603856275m, new DateTime(2015, 12, 18, 4, 47, 25, 586, DateTimeKind.Local).AddTicks(2705), "synergize vertical infomediaries" },
                    { 207, 86, 11.0104121130012360m, new DateTime(2016, 10, 18, 5, 44, 1, 980, DateTimeKind.Local).AddTicks(3707), "iterate granular methodologies" },
                    { 208, 21, 42.772032710468115m, new DateTime(2018, 12, 11, 23, 58, 28, 970, DateTimeKind.Local).AddTicks(4935), "maximize killer e-business" },
                    { 209, 55, 44.646232072479030m, new DateTime(2020, 12, 28, 10, 11, 55, 629, DateTimeKind.Local).AddTicks(305), "maximize open-source communities" },
                    { 210, 92, 67.622991565393125m, new DateTime(2020, 8, 26, 23, 16, 17, 802, DateTimeKind.Local).AddTicks(7761), "grow innovative infrastructures" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 211, 76, 69.872126076711615m, new DateTime(2017, 10, 25, 5, 6, 55, 274, DateTimeKind.Local).AddTicks(7676), "transform bleeding-edge e-services" },
                    { 212, 53, 88.146552341096195m, new DateTime(2014, 8, 3, 14, 59, 10, 712, DateTimeKind.Local).AddTicks(5444), "enhance wireless bandwidth" },
                    { 213, 58, 19.715030982085875m, new DateTime(2015, 6, 12, 2, 31, 14, 500, DateTimeKind.Local).AddTicks(6052), "productize B2C supply-chains" },
                    { 214, 38, 86.736294001636170m, new DateTime(2015, 4, 15, 8, 42, 18, 25, DateTimeKind.Local).AddTicks(818), "orchestrate sticky architectures" },
                    { 215, 82, 96.459551971338740m, new DateTime(2019, 5, 8, 16, 11, 55, 845, DateTimeKind.Local).AddTicks(5888), "transition world-class channels" },
                    { 216, 85, 52.715650783168315m, new DateTime(2016, 9, 10, 10, 6, 8, 888, DateTimeKind.Local).AddTicks(5223), "orchestrate turn-key convergence" },
                    { 217, 85, 62.367352803896485m, new DateTime(2017, 7, 23, 4, 5, 39, 710, DateTimeKind.Local).AddTicks(7753), "monetize dynamic infrastructures" },
                    { 218, 29, 79.861994680652085m, new DateTime(2020, 8, 14, 1, 59, 43, 668, DateTimeKind.Local).AddTicks(2215), "benchmark granular experiences" },
                    { 219, 92, 75.030127277217755m, new DateTime(2015, 11, 18, 2, 43, 40, 855, DateTimeKind.Local).AddTicks(941), "cultivate turn-key web services" },
                    { 220, 84, 9.9786170900959475m, new DateTime(2020, 11, 19, 10, 2, 6, 205, DateTimeKind.Local).AddTicks(4181), "facilitate extensible e-tailers" },
                    { 221, 37, 95.039950688900665m, new DateTime(2018, 11, 5, 1, 23, 58, 285, DateTimeKind.Local).AddTicks(7518), "optimize viral e-commerce" },
                    { 222, 55, 82.202485385659695m, new DateTime(2024, 1, 31, 6, 26, 36, 29, DateTimeKind.Local).AddTicks(3317), "implement dynamic technologies" },
                    { 223, 9, 84.736154409515240m, new DateTime(2023, 9, 12, 19, 39, 18, 60, DateTimeKind.Local).AddTicks(3160), "leverage out-of-the-box mindshare" },
                    { 224, 84, 35.21654888415270m, new DateTime(2018, 11, 16, 10, 44, 31, 398, DateTimeKind.Local).AddTicks(6603), "engineer front-end bandwidth" },
                    { 225, 66, 53.348269941514310m, new DateTime(2018, 7, 14, 6, 44, 54, 75, DateTimeKind.Local).AddTicks(1724), "incentivize e-business technologies" },
                    { 226, 17, 98.293464650644480m, new DateTime(2019, 12, 18, 4, 17, 16, 145, DateTimeKind.Local).AddTicks(1212), "generate bricks-and-clicks action-items" },
                    { 227, 96, 88.832799135345295m, new DateTime(2014, 6, 16, 7, 51, 17, 498, DateTimeKind.Local).AddTicks(512), "evolve end-to-end methodologies" },
                    { 228, 56, 7.5219873219339320m, new DateTime(2016, 10, 27, 11, 14, 39, 105, DateTimeKind.Local).AddTicks(4443), "leverage sexy methodologies" },
                    { 229, 59, 17.629132271299160m, new DateTime(2017, 4, 6, 19, 47, 36, 447, DateTimeKind.Local).AddTicks(3317), "visualize user-centric schemas" },
                    { 230, 80, 10.9995090658788830m, new DateTime(2015, 5, 24, 12, 11, 51, 894, DateTimeKind.Local).AddTicks(4259), "streamline real-time action-items" },
                    { 231, 76, 36.732284778167785m, new DateTime(2021, 12, 26, 17, 36, 9, 579, DateTimeKind.Local).AddTicks(830), "empower robust markets" },
                    { 232, 37, 83.32838867243460m, new DateTime(2019, 6, 11, 15, 13, 6, 142, DateTimeKind.Local).AddTicks(9567), "redefine global functionalities" },
                    { 233, 60, 13.5089638258949005m, new DateTime(2020, 2, 13, 17, 30, 58, 8, DateTimeKind.Local).AddTicks(7829), "syndicate bricks-and-clicks bandwidth" },
                    { 234, 97, 19.944557880645205m, new DateTime(2016, 8, 9, 17, 1, 15, 403, DateTimeKind.Local).AddTicks(6680), "transform bricks-and-clicks partnerships" },
                    { 235, 71, 95.569784441507460m, new DateTime(2017, 8, 20, 3, 27, 6, 72, DateTimeKind.Local).AddTicks(7890), "aggregate cutting-edge channels" },
                    { 236, 30, 48.210144774183255m, new DateTime(2018, 4, 15, 8, 37, 41, 753, DateTimeKind.Local).AddTicks(442), "engage world-class schemas" },
                    { 237, 33, 82.113956435041580m, new DateTime(2019, 11, 3, 8, 38, 48, 187, DateTimeKind.Local).AddTicks(5427), "integrate next-generation methodologies" },
                    { 238, 11, 72.237211081670960m, new DateTime(2018, 7, 3, 21, 17, 8, 296, DateTimeKind.Local).AddTicks(547), "target value-added e-tailers" },
                    { 239, 87, 90.35880742360245m, new DateTime(2022, 7, 30, 12, 47, 2, 527, DateTimeKind.Local).AddTicks(8407), "monetize holistic supply-chains" },
                    { 240, 8, 77.564678422606580m, new DateTime(2022, 8, 12, 6, 50, 42, 71, DateTimeKind.Local).AddTicks(5517), "unleash front-end architectures" },
                    { 241, 30, 36.496971811347430m, new DateTime(2015, 7, 14, 5, 10, 21, 662, DateTimeKind.Local).AddTicks(1070), "synergize one-to-one web services" },
                    { 242, 19, 14.738915725189520m, new DateTime(2020, 1, 8, 11, 1, 40, 482, DateTimeKind.Local).AddTicks(4878), "revolutionize one-to-one applications" },
                    { 243, 86, 26.999618959288295m, new DateTime(2021, 11, 7, 8, 46, 17, 605, DateTimeKind.Local).AddTicks(5023), "orchestrate bleeding-edge relationships" },
                    { 244, 97, 74.871542311161130m, new DateTime(2022, 2, 24, 10, 45, 3, 225, DateTimeKind.Local).AddTicks(8273), "deliver B2B vortals" },
                    { 245, 35, 29.858599618728185m, new DateTime(2021, 8, 23, 14, 3, 29, 469, DateTimeKind.Local).AddTicks(9062), "grow viral deliverables" },
                    { 246, 89, 35.306486228799885m, new DateTime(2015, 4, 25, 13, 27, 9, 497, DateTimeKind.Local).AddTicks(4653), "innovate killer paradigms" },
                    { 247, 47, 22.598248222524325m, new DateTime(2018, 6, 9, 2, 35, 29, 925, DateTimeKind.Local).AddTicks(1209), "incentivize dynamic technologies" },
                    { 248, 58, 22.899989423572105m, new DateTime(2018, 5, 7, 19, 55, 22, 511, DateTimeKind.Local).AddTicks(9411), "repurpose sticky ROI" },
                    { 249, 4, 89.819288742916645m, new DateTime(2015, 6, 8, 11, 31, 31, 466, DateTimeKind.Local).AddTicks(7696), "innovate open-source vortals" },
                    { 250, 87, 47.228728953848690m, new DateTime(2020, 9, 22, 20, 4, 54, 168, DateTimeKind.Local).AddTicks(5443), "transform wireless systems" },
                    { 251, 44, 68.652688588877820m, new DateTime(2022, 3, 5, 12, 6, 7, 844, DateTimeKind.Local).AddTicks(4754), "empower world-class niches" },
                    { 252, 13, 63.732562188459565m, new DateTime(2020, 6, 20, 18, 4, 0, 96, DateTimeKind.Local).AddTicks(194), "target end-to-end deliverables" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 253, 87, 5.84562870809947625m, new DateTime(2014, 11, 9, 0, 30, 18, 730, DateTimeKind.Local).AddTicks(2644), "architect wireless e-markets" },
                    { 254, 83, 20.087255441836565m, new DateTime(2014, 6, 20, 8, 54, 44, 610, DateTimeKind.Local).AddTicks(5977), "harness robust infomediaries" },
                    { 255, 85, 78.930288939498905m, new DateTime(2021, 3, 17, 0, 2, 21, 322, DateTimeKind.Local).AddTicks(9029), "syndicate ubiquitous platforms" },
                    { 256, 44, 38.738457703786510m, new DateTime(2023, 9, 22, 14, 27, 49, 922, DateTimeKind.Local).AddTicks(4248), "iterate bleeding-edge e-commerce" },
                    { 257, 97, 70.179488353885210m, new DateTime(2018, 7, 30, 11, 33, 57, 246, DateTimeKind.Local).AddTicks(9496), "monetize cross-media solutions" },
                    { 258, 43, 35.671361106313135m, new DateTime(2018, 2, 16, 9, 57, 25, 682, DateTimeKind.Local).AddTicks(5860), "visualize clicks-and-mortar platforms" },
                    { 259, 48, 73.639188129419580m, new DateTime(2023, 12, 23, 13, 35, 27, 291, DateTimeKind.Local).AddTicks(9742), "cultivate next-generation infrastructures" },
                    { 260, 80, 45.472357857899610m, new DateTime(2014, 7, 23, 17, 16, 17, 529, DateTimeKind.Local).AddTicks(6534), "engage next-generation synergies" },
                    { 261, 73, 94.100269811592065m, new DateTime(2015, 5, 20, 7, 45, 41, 471, DateTimeKind.Local).AddTicks(1043), "grow innovative niches" },
                    { 262, 83, 11.5750013151130180m, new DateTime(2019, 1, 6, 11, 59, 20, 338, DateTimeKind.Local).AddTicks(1770), "streamline sexy initiatives" },
                    { 263, 47, 37.309592270266675m, new DateTime(2020, 9, 16, 3, 14, 8, 121, DateTimeKind.Local).AddTicks(4363), "disintermediate impactful platforms" },
                    { 264, 33, 6.834196784484780m, new DateTime(2015, 7, 14, 15, 34, 32, 867, DateTimeKind.Local).AddTicks(6264), "architect real-time infomediaries" },
                    { 265, 28, 30.998240517016095m, new DateTime(2015, 5, 7, 9, 34, 25, 100, DateTimeKind.Local).AddTicks(2686), "incubate one-to-one applications" },
                    { 266, 82, 94.588974395638390m, new DateTime(2018, 6, 21, 4, 33, 7, 629, DateTimeKind.Local).AddTicks(3537), "streamline leading-edge e-commerce" },
                    { 267, 42, 54.625469077644655m, new DateTime(2022, 5, 2, 23, 40, 54, 861, DateTimeKind.Local).AddTicks(4517), "redefine vertical schemas" },
                    { 268, 49, 50.58408033951655m, new DateTime(2020, 3, 19, 10, 49, 0, 267, DateTimeKind.Local).AddTicks(8607), "reintermediate B2C communities" },
                    { 269, 30, 7.9503854125356175m, new DateTime(2017, 12, 31, 21, 47, 50, 60, DateTimeKind.Local).AddTicks(653), "innovate killer channels" },
                    { 270, 2, 25.791357040078770m, new DateTime(2019, 11, 25, 7, 42, 32, 636, DateTimeKind.Local).AddTicks(1855), "maximize dynamic markets" },
                    { 271, 82, 85.846292771653175m, new DateTime(2017, 2, 19, 22, 29, 59, 805, DateTimeKind.Local).AddTicks(4244), "aggregate rich content" },
                    { 272, 7, 31.185561177854220m, new DateTime(2021, 1, 20, 3, 30, 4, 471, DateTimeKind.Local).AddTicks(8395), "aggregate extensible portals" },
                    { 273, 9, 34.389719965789405m, new DateTime(2017, 8, 16, 22, 18, 18, 723, DateTimeKind.Local).AddTicks(8128), "scale compelling e-markets" },
                    { 274, 38, 24.756098185949345m, new DateTime(2014, 4, 10, 22, 1, 37, 188, DateTimeKind.Local).AddTicks(4937), "engineer open-source methodologies" },
                    { 275, 54, 57.394328334941960m, new DateTime(2021, 9, 15, 14, 15, 22, 740, DateTimeKind.Local).AddTicks(4079), "recontextualize ubiquitous communities" },
                    { 276, 54, 59.218153342611990m, new DateTime(2016, 11, 26, 2, 52, 8, 164, DateTimeKind.Local).AddTicks(5917), "morph next-generation web-readiness" },
                    { 277, 3, 64.355812780122940m, new DateTime(2023, 8, 7, 22, 52, 14, 886, DateTimeKind.Local).AddTicks(6587), "empower next-generation blockchains" },
                    { 278, 31, 61.662007835057940m, new DateTime(2022, 6, 12, 3, 56, 48, 130, DateTimeKind.Local).AddTicks(920), "innovate cross-media initiatives" },
                    { 279, 5, 60.622072182910235m, new DateTime(2014, 4, 15, 16, 34, 50, 407, DateTimeKind.Local).AddTicks(4411), "benchmark cross-platform architectures" },
                    { 280, 78, 40.460119085052380m, new DateTime(2014, 6, 21, 3, 41, 55, 730, DateTimeKind.Local).AddTicks(3099), "transition cross-media vortals" },
                    { 281, 23, 52.392476707519185m, new DateTime(2019, 6, 18, 0, 49, 10, 692, DateTimeKind.Local).AddTicks(5559), "engineer visionary initiatives" },
                    { 282, 17, 90.369450018935855m, new DateTime(2019, 6, 9, 17, 43, 45, 106, DateTimeKind.Local).AddTicks(3471), "disintermediate sexy systems" },
                    { 283, 12, 48.147074423456565m, new DateTime(2015, 8, 29, 9, 57, 18, 606, DateTimeKind.Local).AddTicks(1097), "extend holistic paradigms" },
                    { 284, 74, 11.5133809570675530m, new DateTime(2023, 8, 16, 7, 1, 54, 238, DateTimeKind.Local).AddTicks(7249), "synergize leading-edge web-readiness" },
                    { 285, 55, 52.50507544385220m, new DateTime(2017, 9, 20, 2, 50, 17, 598, DateTimeKind.Local).AddTicks(5316), "enable e-business e-tailers" },
                    { 286, 89, 80.55060540577545m, new DateTime(2015, 12, 26, 5, 36, 58, 327, DateTimeKind.Local).AddTicks(4377), "harness rich web-readiness" },
                    { 287, 75, 13.485035841294175m, new DateTime(2022, 10, 7, 4, 11, 51, 294, DateTimeKind.Local).AddTicks(6559), "embrace visionary schemas" },
                    { 288, 97, 10.7697617510686630m, new DateTime(2022, 10, 20, 21, 38, 11, 344, DateTimeKind.Local).AddTicks(8469), "visualize cross-media solutions" },
                    { 289, 39, 99.387713047821715m, new DateTime(2020, 1, 14, 10, 15, 21, 194, DateTimeKind.Local).AddTicks(3101), "grow dynamic platforms" },
                    { 290, 3, 35.395678119984820m, new DateTime(2015, 1, 26, 7, 23, 38, 978, DateTimeKind.Local).AddTicks(2834), "optimize cross-media e-services" },
                    { 291, 62, 72.103796044935945m, new DateTime(2018, 8, 20, 0, 56, 29, 810, DateTimeKind.Local).AddTicks(4640), "streamline compelling vortals" },
                    { 292, 16, 85.721025740219765m, new DateTime(2017, 3, 23, 5, 52, 52, 195, DateTimeKind.Local).AddTicks(7354), "evolve rich vortals" },
                    { 293, 34, 85.222109071409320m, new DateTime(2015, 9, 13, 19, 48, 34, 753, DateTimeKind.Local).AddTicks(219), "orchestrate integrated deliverables" },
                    { 294, 87, 67.829929024881020m, new DateTime(2022, 2, 25, 5, 32, 49, 101, DateTimeKind.Local).AddTicks(4290), "mesh front-end paradigms" }
                });

            migrationBuilder.InsertData(
                table: "Books",
                columns: new[] { "BookId", "AuthorId", "BasePrice", "PublishDate", "Title" },
                values: new object[,]
                {
                    { 295, 38, 33.027576290499865m, new DateTime(2020, 3, 6, 15, 17, 7, 431, DateTimeKind.Local).AddTicks(7404), "aggregate extensible web services" },
                    { 296, 93, 17.007074000337065m, new DateTime(2021, 1, 1, 15, 11, 12, 205, DateTimeKind.Local).AddTicks(479), "target killer portals" },
                    { 297, 100, 77.443483611540895m, new DateTime(2015, 12, 31, 20, 25, 41, 903, DateTimeKind.Local).AddTicks(5141), "embrace sticky relationships" },
                    { 298, 1, 89.908847323128890m, new DateTime(2018, 1, 20, 1, 49, 4, 22, DateTimeKind.Local).AddTicks(4676), "deliver world-class blockchains" },
                    { 299, 73, 81.359220398692510m, new DateTime(2014, 11, 5, 7, 40, 36, 459, DateTimeKind.Local).AddTicks(8742), "synthesize enterprise bandwidth" },
                    { 300, 34, 62.319863984638480m, new DateTime(2018, 8, 7, 8, 14, 39, 16, DateTimeKind.Local).AddTicks(531), "utilize user-centric eyeballs" }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 1, 1, "parse", true },
                    { 2, 2, "reboot", true },
                    { 3, 3, "bypass", false },
                    { 4, 4, "calculate", true },
                    { 5, 5, "quantify", true },
                    { 6, 6, "calculate", false },
                    { 7, 7, "connect", false },
                    { 8, 8, "bypass", false },
                    { 9, 9, "compress", true },
                    { 10, 10, "synthesize", true },
                    { 11, 11, "reboot", false },
                    { 12, 12, "bypass", true },
                    { 13, 13, "calculate", true },
                    { 14, 14, "input", false },
                    { 15, 15, "hack", false },
                    { 16, 16, "index", false },
                    { 17, 17, "index", false },
                    { 18, 18, "bypass", true },
                    { 19, 19, "input", true },
                    { 20, 20, "generate", true },
                    { 21, 21, "override", true },
                    { 22, 22, "bypass", false },
                    { 23, 23, "navigate", false },
                    { 24, 24, "input", true },
                    { 25, 25, "parse", false },
                    { 26, 26, "override", true },
                    { 27, 27, "compress", false },
                    { 28, 28, "synthesize", false },
                    { 29, 29, "generate", true },
                    { 30, 30, "navigate", true },
                    { 31, 31, "hack", false },
                    { 32, 32, "transmit", false },
                    { 33, 33, "transmit", true },
                    { 34, 34, "override", true },
                    { 35, 35, "calculate", false },
                    { 36, 36, "quantify", true },
                    { 37, 37, "reboot", true },
                    { 38, 38, "navigate", true },
                    { 39, 39, "hack", false },
                    { 40, 40, "bypass", true },
                    { 41, 41, "program", true },
                    { 42, 42, "connect", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 43, 43, "bypass", false },
                    { 44, 44, "generate", true },
                    { 45, 45, "calculate", true },
                    { 46, 46, "calculate", false },
                    { 47, 47, "input", false },
                    { 48, 48, "copy", true },
                    { 49, 49, "connect", false },
                    { 50, 50, "index", false },
                    { 51, 51, "compress", false },
                    { 52, 52, "index", false },
                    { 53, 53, "program", true },
                    { 54, 54, "generate", false },
                    { 55, 55, "compress", false },
                    { 56, 56, "parse", false },
                    { 57, 57, "override", false },
                    { 58, 58, "copy", false },
                    { 59, 59, "connect", false },
                    { 60, 60, "copy", false },
                    { 61, 61, "parse", false },
                    { 62, 62, "hack", false },
                    { 63, 63, "connect", false },
                    { 64, 64, "hack", true },
                    { 65, 65, "transmit", true },
                    { 66, 66, "index", true },
                    { 67, 67, "parse", true },
                    { 68, 68, "hack", true },
                    { 69, 69, "generate", false },
                    { 70, 70, "synthesize", true },
                    { 71, 71, "compress", true },
                    { 72, 72, "hack", false },
                    { 73, 73, "transmit", false },
                    { 74, 74, "bypass", false },
                    { 75, 75, "transmit", true },
                    { 76, 76, "program", false },
                    { 77, 77, "program", true },
                    { 78, 78, "back up", false },
                    { 79, 79, "hack", true },
                    { 80, 80, "compress", false },
                    { 81, 81, "index", true },
                    { 82, 82, "bypass", false },
                    { 83, 83, "compress", false },
                    { 84, 84, "copy", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 85, 85, "generate", false },
                    { 86, 86, "copy", true },
                    { 87, 87, "index", false },
                    { 88, 88, "override", true },
                    { 89, 89, "program", false },
                    { 90, 90, "generate", true },
                    { 91, 91, "navigate", false },
                    { 92, 92, "back up", true },
                    { 93, 93, "hack", false },
                    { 94, 94, "index", false },
                    { 95, 95, "transmit", true },
                    { 96, 96, "quantify", false },
                    { 97, 97, "input", false },
                    { 98, 98, "navigate", true },
                    { 99, 99, "reboot", false },
                    { 100, 100, "parse", true },
                    { 101, 101, "index", false },
                    { 102, 102, "navigate", true },
                    { 103, 103, "input", false },
                    { 104, 104, "override", false },
                    { 105, 105, "input", false },
                    { 106, 106, "quantify", false },
                    { 107, 107, "override", false },
                    { 108, 108, "index", false },
                    { 109, 109, "quantify", false },
                    { 110, 110, "back up", false },
                    { 111, 111, "generate", false },
                    { 112, 112, "back up", true },
                    { 113, 113, "navigate", false },
                    { 114, 114, "program", true },
                    { 115, 115, "bypass", false },
                    { 116, 116, "parse", false },
                    { 117, 117, "program", false },
                    { 118, 118, "back up", true },
                    { 119, 119, "compress", false },
                    { 120, 120, "connect", true },
                    { 121, 121, "index", false },
                    { 122, 122, "override", true },
                    { 123, 123, "back up", false },
                    { 124, 124, "connect", true },
                    { 125, 125, "calculate", false },
                    { 126, 126, "parse", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 127, 127, "quantify", false },
                    { 128, 128, "override", false },
                    { 129, 129, "index", false },
                    { 130, 130, "quantify", true },
                    { 131, 131, "synthesize", false },
                    { 132, 132, "transmit", false },
                    { 133, 133, "connect", true },
                    { 134, 134, "parse", false },
                    { 135, 135, "navigate", false },
                    { 136, 136, "bypass", false },
                    { 137, 137, "copy", true },
                    { 138, 138, "connect", true },
                    { 139, 139, "program", true },
                    { 140, 140, "override", true },
                    { 141, 141, "reboot", true },
                    { 142, 142, "synthesize", false },
                    { 143, 143, "input", false },
                    { 144, 144, "transmit", true },
                    { 145, 145, "generate", true },
                    { 146, 146, "copy", true },
                    { 147, 147, "navigate", true },
                    { 148, 148, "reboot", true },
                    { 149, 149, "index", false },
                    { 150, 150, "program", false },
                    { 151, 151, "bypass", false },
                    { 152, 152, "calculate", false },
                    { 153, 153, "generate", false },
                    { 154, 154, "parse", false },
                    { 155, 155, "calculate", true },
                    { 156, 156, "bypass", true },
                    { 157, 157, "synthesize", false },
                    { 158, 158, "synthesize", true },
                    { 159, 159, "bypass", false },
                    { 160, 160, "synthesize", true },
                    { 161, 161, "bypass", false },
                    { 162, 162, "bypass", true },
                    { 163, 163, "transmit", true },
                    { 164, 164, "input", true },
                    { 165, 165, "generate", false },
                    { 166, 166, "generate", false },
                    { 167, 167, "override", false },
                    { 168, 168, "reboot", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 169, 169, "quantify", false },
                    { 170, 170, "synthesize", true },
                    { 171, 171, "calculate", true },
                    { 172, 172, "input", true },
                    { 173, 173, "generate", false },
                    { 174, 174, "hack", true },
                    { 175, 175, "program", true },
                    { 176, 176, "connect", false },
                    { 177, 177, "input", true },
                    { 178, 178, "calculate", true },
                    { 179, 179, "hack", false },
                    { 180, 180, "generate", true },
                    { 181, 181, "program", false },
                    { 182, 182, "navigate", false },
                    { 183, 183, "calculate", true },
                    { 184, 184, "program", true },
                    { 185, 185, "program", false },
                    { 186, 186, "reboot", true },
                    { 187, 187, "hack", false },
                    { 188, 188, "back up", false },
                    { 189, 189, "copy", true },
                    { 190, 190, "program", false },
                    { 191, 191, "program", true },
                    { 192, 192, "parse", true },
                    { 193, 193, "compress", false },
                    { 194, 194, "quantify", true },
                    { 195, 195, "calculate", false },
                    { 196, 196, "program", false },
                    { 197, 197, "calculate", false },
                    { 198, 198, "connect", false },
                    { 199, 199, "index", true },
                    { 200, 200, "program", true },
                    { 201, 201, "index", false },
                    { 202, 202, "parse", true },
                    { 203, 203, "override", true },
                    { 204, 204, "navigate", false },
                    { 205, 205, "calculate", true },
                    { 206, 206, "compress", false },
                    { 207, 207, "input", true },
                    { 208, 208, "input", false },
                    { 209, 209, "back up", false },
                    { 210, 210, "generate", true }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 211, 211, "program", false },
                    { 212, 212, "hack", false },
                    { 213, 213, "back up", true },
                    { 214, 214, "copy", false },
                    { 215, 215, "compress", true },
                    { 216, 216, "hack", false },
                    { 217, 217, "generate", false },
                    { 218, 218, "index", true },
                    { 219, 219, "reboot", false },
                    { 220, 220, "index", false },
                    { 221, 221, "compress", false },
                    { 222, 222, "navigate", false },
                    { 223, 223, "generate", true },
                    { 224, 224, "navigate", true },
                    { 225, 225, "synthesize", true },
                    { 226, 226, "calculate", true },
                    { 227, 227, "quantify", true },
                    { 228, 228, "copy", true },
                    { 229, 229, "compress", false },
                    { 230, 230, "reboot", false },
                    { 231, 231, "quantify", true },
                    { 232, 232, "input", false },
                    { 233, 233, "back up", false },
                    { 234, 234, "hack", true },
                    { 235, 235, "transmit", true },
                    { 236, 236, "back up", true },
                    { 237, 237, "compress", true },
                    { 238, 238, "reboot", false },
                    { 239, 239, "copy", false },
                    { 240, 240, "input", true },
                    { 241, 241, "back up", true },
                    { 242, 242, "navigate", false },
                    { 243, 243, "index", true },
                    { 244, 244, "parse", true },
                    { 245, 245, "override", true },
                    { 246, 246, "quantify", false },
                    { 247, 247, "copy", true },
                    { 248, 248, "compress", true },
                    { 249, 249, "bypass", true },
                    { 250, 250, "parse", false },
                    { 251, 251, "input", false },
                    { 252, 252, "synthesize", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 253, 253, "override", false },
                    { 254, 254, "generate", false },
                    { 255, 255, "reboot", true },
                    { 256, 256, "connect", true },
                    { 257, 257, "navigate", true },
                    { 258, 258, "parse", true },
                    { 259, 259, "synthesize", true },
                    { 260, 260, "transmit", true },
                    { 261, 261, "reboot", false },
                    { 262, 262, "compress", true },
                    { 263, 263, "copy", false },
                    { 264, 264, "reboot", true },
                    { 265, 265, "input", false },
                    { 266, 266, "calculate", true },
                    { 267, 267, "navigate", false },
                    { 268, 268, "generate", false },
                    { 269, 269, "navigate", true },
                    { 270, 270, "navigate", true },
                    { 271, 271, "connect", false },
                    { 272, 272, "synthesize", true },
                    { 273, 273, "program", false },
                    { 274, 274, "bypass", false },
                    { 275, 275, "compress", false },
                    { 276, 276, "input", true },
                    { 277, 277, "hack", false },
                    { 278, 278, "index", true },
                    { 279, 279, "hack", true },
                    { 280, 280, "transmit", false },
                    { 281, 281, "input", true },
                    { 282, 282, "synthesize", false },
                    { 283, 283, "calculate", false },
                    { 284, 284, "bypass", false },
                    { 285, 285, "copy", true },
                    { 286, 286, "calculate", true },
                    { 287, 287, "program", false },
                    { 288, 288, "connect", true },
                    { 289, 289, "bypass", false },
                    { 290, 290, "generate", false },
                    { 291, 291, "bypass", true },
                    { 292, 292, "transmit", false },
                    { 293, 293, "input", false },
                    { 294, 294, "back up", false }
                });

            migrationBuilder.InsertData(
                table: "Covers",
                columns: new[] { "CoverId", "BookId", "DesignIdeas", "DigitalOnly" },
                values: new object[,]
                {
                    { 295, 295, "index", true },
                    { 296, 296, "calculate", false },
                    { 297, 297, "parse", true },
                    { 298, 298, "back up", false },
                    { 299, 299, "copy", false },
                    { 300, 300, "compress", true }
                });

            migrationBuilder.CreateIndex(
                name: "IX_ArtistCover_CoversCoverId",
                table: "ArtistCover",
                column: "CoversCoverId");

            migrationBuilder.CreateIndex(
                name: "IX_Books_AuthorId",
                table: "Books",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_Covers_BookId",
                table: "Covers",
                column: "BookId",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ArtistCover");

            migrationBuilder.DropTable(
                name: "Artists");

            migrationBuilder.DropTable(
                name: "Covers");

            migrationBuilder.DropTable(
                name: "Books");

            migrationBuilder.DropTable(
                name: "Authors");
        }
    }
}
